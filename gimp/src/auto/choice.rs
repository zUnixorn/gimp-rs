// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{ffi};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    ///
    ///
    /// ## Signals
    ///
    ///
    /// #### `sensitivity-changed`
    ///
    #[doc(alias = "GimpChoice")]
    pub struct Choice(Object<ffi::GimpChoice, ffi::GimpChoiceClass>);

    match fn {
        type_ => || ffi::gimp_choice_get_type(),
    }
}

impl Choice {
    ///
    /// # Returns
    ///
    /// a [`Choice`][crate::Choice].
    #[doc(alias = "gimp_choice_new")]
    pub fn new() -> Choice {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::gimp_choice_new())
        }
    }

    //#[doc(alias = "gimp_choice_new_with_values")]
    //#[doc(alias = "new_with_values")]
    //pub fn with_values(nick: &str, id: i32, label: &str, help: &str, : /*Unknown conversion*//*Unimplemented*/Basic: VarArgs) -> Choice {
    //    unsafe { TODO: call ffi:gimp_choice_new_with_values() }
    //}

    /// This procedure adds a new possible value to `self` list of values.
    /// The `id` is an optional integer identifier. This can be useful for instance
    /// when you want to work with different enum values mapped to each `nick`.
    /// ## `nick`
    /// the nick of `self`.
    /// ## `id`
    /// optional integer ID for `nick`.
    /// ## `label`
    /// the label of `self`.
    /// ## `help`
    /// optional longer help text for `nick`.
    #[doc(alias = "gimp_choice_add")]
    pub fn add(&self, nick: &str, id: i32, label: &str, help: &str) {
        unsafe {
            ffi::gimp_choice_add(self.to_glib_none().0, nick.to_glib_none().0, id, label.to_glib_none().0, help.to_glib_none().0);
        }
    }

    /// Returns the longer documentation for `nick`.
    /// ## `nick`
    /// the nick to lookup.
    ///
    /// # Returns
    ///
    /// the help text of `nick`.
    #[doc(alias = "gimp_choice_get_help")]
    #[doc(alias = "get_help")]
    pub fn help(&self, nick: &str) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gimp_choice_get_help(self.to_glib_none().0, nick.to_glib_none().0))
        }
    }

    /// ## `nick`
    /// the nick to lookup.
    ///
    /// # Returns
    ///
    /// the ID of `nick`.
    #[doc(alias = "gimp_choice_get_id")]
    #[doc(alias = "get_id")]
    pub fn id(&self, nick: &str) -> i32 {
        unsafe {
            ffi::gimp_choice_get_id(self.to_glib_none().0, nick.to_glib_none().0)
        }
    }

    /// ## `nick`
    /// the nick to lookup.
    ///
    /// # Returns
    ///
    /// the label of `nick`.
    #[doc(alias = "gimp_choice_get_label")]
    #[doc(alias = "get_label")]
    pub fn label(&self, nick: &str) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gimp_choice_get_label(self.to_glib_none().0, nick.to_glib_none().0))
        }
    }

    /// This procedure checks if the given `nick` is valid and refers to
    /// an existing choice.
    /// ## `nick`
    /// the nick to check.
    ///
    /// # Returns
    ///
    /// Whether the choice is valid.
    #[doc(alias = "gimp_choice_is_valid")]
    pub fn is_valid(&self, nick: &str) -> bool {
        unsafe {
            from_glib(ffi::gimp_choice_is_valid(self.to_glib_none().0, nick.to_glib_none().0))
        }
    }

    /// This procedure returns the list of nicks allowed for `self`.
    ///
    /// # Returns
    ///
    /// The list of `self`'s nicks.
    #[doc(alias = "gimp_choice_list_nicks")]
    pub fn list_nicks(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::gimp_choice_list_nicks(self.to_glib_none().0))
        }
    }

    /// Change the sensitivity of a possible `nick`. Technically a non-sensitive `nick`
    /// means it cannot be chosen anymore (so [method`Gimp`.is_valid] will
    /// return [`false`]; nevertheless [method`Gimp`.list_nicks] and other
    /// functions to get information about a choice will still function).
    /// ## `nick`
    /// the nick to lookup.
    #[doc(alias = "gimp_choice_set_sensitive")]
    pub fn set_sensitive(&self, nick: &str, sensitive: bool) {
        unsafe {
            ffi::gimp_choice_set_sensitive(self.to_glib_none().0, nick.to_glib_none().0, sensitive.into_glib());
        }
    }

    #[doc(alias = "sensitivity-changed")]
    pub fn connect_sensitivity_changed<F: Fn(&Self, &str) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn sensitivity_changed_trampoline<F: Fn(&Choice, &str) + 'static>(this: *mut ffi::GimpChoice, object: *mut std::ffi::c_char, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &glib::GString::from_glib_borrow(object))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"sensitivity-changed".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(sensitivity_changed_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl Default for Choice {
                     fn default() -> Self {
                         Self::new()
                     }
                 }
