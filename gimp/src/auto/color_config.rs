// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{ffi,ColorManagementMode,ColorProfile,ColorRenderingIntent};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    /// Color management settings.
    ///
    /// ## Properties
    ///
    ///
    /// #### `cmyk-profile`
    ///  Readable | Writeable | Construct
    ///
    ///
    /// #### `display-optimize`
    ///  Readable | Writeable | Construct
    ///
    ///
    /// #### `display-profile`
    ///  Readable | Writeable | Construct
    ///
    ///
    /// #### `display-profile-from-gdk`
    ///  Readable | Writeable | Construct
    ///
    ///
    /// #### `display-rendering-intent`
    ///  Readable | Writeable | Construct
    ///
    ///
    /// #### `display-use-black-point-compensation`
    ///  Readable | Writeable | Construct
    ///
    ///
    /// #### `gray-profile`
    ///  Readable | Writeable | Construct
    ///
    ///
    /// #### `mode`
    ///  Readable | Writeable | Construct
    ///
    ///
    /// #### `out-of-gamut-color`
    ///  Readable | Writeable
    ///
    ///
    /// #### `rgb-profile`
    ///  Readable | Writeable | Construct
    ///
    ///
    /// #### `show-hsv`
    ///  Readable | Writeable | Construct
    ///
    ///
    /// #### `show-rgb-u8`
    ///  Readable | Writeable | Construct
    ///
    ///
    /// #### `simulation-gamut-check`
    ///  Readable | Writeable | Construct
    ///
    ///
    /// #### `simulation-optimize`
    ///  Readable | Writeable | Construct
    ///
    ///
    /// #### `simulation-profile`
    ///  Readable | Writeable | Construct
    ///
    ///
    /// #### `simulation-rendering-intent`
    ///  Readable | Writeable | Construct
    ///
    ///
    /// #### `simulation-use-black-point-compensation`
    ///  Readable | Writeable | Construct
    ///
    /// # Implements
    ///
    /// [`trait@glib::ObjectExt`]
    #[doc(alias = "GimpColorConfig")]
    pub struct ColorConfig(Object<ffi::GimpColorConfig, ffi::GimpColorConfigClass>);

    match fn {
        type_ => || ffi::gimp_color_config_get_type(),
    }
}

impl ColorConfig {
    ///
    /// # Returns
    ///
    /// the default CMYK color profile.
    #[doc(alias = "gimp_color_config_get_cmyk_color_profile")]
    #[doc(alias = "get_cmyk_color_profile")]
    pub fn cmyk_color_profile(&self) -> Result<ColorProfile, glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::gimp_color_config_get_cmyk_color_profile(self.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "gimp_color_config_get_display_bpc")]
    #[doc(alias = "get_display_bpc")]
    pub fn is_display_bpc(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_color_config_get_display_bpc(self.to_glib_none().0))
        }
    }

    ///
    /// # Returns
    ///
    /// the default display color profile.
    #[doc(alias = "gimp_color_config_get_display_color_profile")]
    #[doc(alias = "get_display_color_profile")]
    pub fn display_color_profile(&self) -> Result<ColorProfile, glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::gimp_color_config_get_display_color_profile(self.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "gimp_color_config_get_display_intent")]
    #[doc(alias = "get_display_intent")]
    pub fn display_intent(&self) -> ColorRenderingIntent {
        unsafe {
            from_glib(ffi::gimp_color_config_get_display_intent(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_color_config_get_display_optimize")]
    #[doc(alias = "get_display_optimize")]
    #[doc(alias = "display-optimize")]
    pub fn is_display_optimize(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_color_config_get_display_optimize(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_color_config_get_display_profile_from_gdk")]
    #[doc(alias = "get_display_profile_from_gdk")]
    #[doc(alias = "display-profile-from-gdk")]
    pub fn is_display_profile_from_gdk(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_color_config_get_display_profile_from_gdk(self.to_glib_none().0))
        }
    }

    ///
    /// # Returns
    ///
    /// the default grayscale color profile.
    #[doc(alias = "gimp_color_config_get_gray_color_profile")]
    #[doc(alias = "get_gray_color_profile")]
    pub fn gray_color_profile(&self) -> Result<ColorProfile, glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::gimp_color_config_get_gray_color_profile(self.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "gimp_color_config_get_mode")]
    #[doc(alias = "get_mode")]
    pub fn mode(&self) -> ColorManagementMode {
        unsafe {
            from_glib(ffi::gimp_color_config_get_mode(self.to_glib_none().0))
        }
    }

    ///
    /// # Returns
    ///
    /// the [class`Gegl`] to use to represent
    ///  out-of-gamut pixels.
    #[doc(alias = "gimp_color_config_get_out_of_gamut_color")]
    #[doc(alias = "get_out_of_gamut_color")]
    #[doc(alias = "out-of-gamut-color")]
    pub fn out_of_gamut_color(&self) -> Option<gegl::Color> {
        unsafe {
            from_glib_full(ffi::gimp_color_config_get_out_of_gamut_color(self.to_glib_none().0))
        }
    }

    ///
    /// # Returns
    ///
    /// the default RGB color profile.
    #[doc(alias = "gimp_color_config_get_rgb_color_profile")]
    #[doc(alias = "get_rgb_color_profile")]
    pub fn rgb_color_profile(&self) -> Result<ColorProfile, glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::gimp_color_config_get_rgb_color_profile(self.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "gimp_color_config_get_simulation_bpc")]
    #[doc(alias = "get_simulation_bpc")]
    pub fn is_simulation_bpc(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_color_config_get_simulation_bpc(self.to_glib_none().0))
        }
    }

    ///
    /// # Returns
    ///
    /// the default soft-proofing color
    ///  profile.
    #[doc(alias = "gimp_color_config_get_simulation_color_profile")]
    #[doc(alias = "get_simulation_color_profile")]
    pub fn simulation_color_profile(&self) -> Result<ColorProfile, glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::gimp_color_config_get_simulation_color_profile(self.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "gimp_color_config_get_simulation_gamut_check")]
    #[doc(alias = "get_simulation_gamut_check")]
    #[doc(alias = "simulation-gamut-check")]
    pub fn is_simulation_gamut_check(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_color_config_get_simulation_gamut_check(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_color_config_get_simulation_intent")]
    #[doc(alias = "get_simulation_intent")]
    pub fn simulation_intent(&self) -> ColorRenderingIntent {
        unsafe {
            from_glib(ffi::gimp_color_config_get_simulation_intent(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_color_config_get_simulation_optimize")]
    #[doc(alias = "get_simulation_optimize")]
    #[doc(alias = "simulation-optimize")]
    pub fn is_simulation_optimize(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_color_config_get_simulation_optimize(self.to_glib_none().0))
        }
    }

    //#[doc(alias = "cmyk-profile")]
    //pub fn cmyk_profile(&self) -> /*Ignored*/Option<ConfigPath> {
    //    ObjectExt::property(self, "cmyk-profile")
    //}

    //#[doc(alias = "cmyk-profile")]
    //pub fn set_cmyk_profile(&self, cmyk_profile: /*Ignored*/Option<&ConfigPath>) {
    //    ObjectExt::set_property(self,"cmyk-profile", cmyk_profile)
    //}

    #[doc(alias = "display-optimize")]
    pub fn set_display_optimize(&self, display_optimize: bool) {
        ObjectExt::set_property(self,"display-optimize", display_optimize)
    }

    //#[doc(alias = "display-profile")]
    //pub fn display_profile(&self) -> /*Ignored*/Option<ConfigPath> {
    //    ObjectExt::property(self, "display-profile")
    //}

    //#[doc(alias = "display-profile")]
    //pub fn set_display_profile(&self, display_profile: /*Ignored*/Option<&ConfigPath>) {
    //    ObjectExt::set_property(self,"display-profile", display_profile)
    //}

    #[doc(alias = "display-profile-from-gdk")]
    pub fn set_display_profile_from_gdk(&self, display_profile_from_gdk: bool) {
        ObjectExt::set_property(self,"display-profile-from-gdk", display_profile_from_gdk)
    }

    #[doc(alias = "display-rendering-intent")]
    pub fn display_rendering_intent(&self) -> ColorRenderingIntent {
        ObjectExt::property(self, "display-rendering-intent")
    }

    #[doc(alias = "display-rendering-intent")]
    pub fn set_display_rendering_intent(&self, display_rendering_intent: ColorRenderingIntent) {
        ObjectExt::set_property(self,"display-rendering-intent", display_rendering_intent)
    }

    #[doc(alias = "display-use-black-point-compensation")]
    pub fn is_display_use_black_point_compensation(&self) -> bool {
        ObjectExt::property(self, "display-use-black-point-compensation")
    }

    #[doc(alias = "display-use-black-point-compensation")]
    pub fn set_display_use_black_point_compensation(&self, display_use_black_point_compensation: bool) {
        ObjectExt::set_property(self,"display-use-black-point-compensation", display_use_black_point_compensation)
    }

    //#[doc(alias = "gray-profile")]
    //pub fn gray_profile(&self) -> /*Ignored*/Option<ConfigPath> {
    //    ObjectExt::property(self, "gray-profile")
    //}

    //#[doc(alias = "gray-profile")]
    //pub fn set_gray_profile(&self, gray_profile: /*Ignored*/Option<&ConfigPath>) {
    //    ObjectExt::set_property(self,"gray-profile", gray_profile)
    //}

    pub fn set_mode(&self, mode: ColorManagementMode) {
        ObjectExt::set_property(self,"mode", mode)
    }

    #[doc(alias = "out-of-gamut-color")]
    pub fn set_out_of_gamut_color<P: IsA<gegl::Color>>(&self, out_of_gamut_color: Option<&P>) {
        ObjectExt::set_property(self,"out-of-gamut-color", out_of_gamut_color)
    }

    //#[doc(alias = "rgb-profile")]
    //pub fn rgb_profile(&self) -> /*Ignored*/Option<ConfigPath> {
    //    ObjectExt::property(self, "rgb-profile")
    //}

    //#[doc(alias = "rgb-profile")]
    //pub fn set_rgb_profile(&self, rgb_profile: /*Ignored*/Option<&ConfigPath>) {
    //    ObjectExt::set_property(self,"rgb-profile", rgb_profile)
    //}

    #[doc(alias = "show-hsv")]
    pub fn shows_hsv(&self) -> bool {
        ObjectExt::property(self, "show-hsv")
    }

    #[doc(alias = "show-hsv")]
    pub fn set_show_hsv(&self, show_hsv: bool) {
        ObjectExt::set_property(self,"show-hsv", show_hsv)
    }

    #[doc(alias = "show-rgb-u8")]
    pub fn shows_rgb_u8(&self) -> bool {
        ObjectExt::property(self, "show-rgb-u8")
    }

    #[doc(alias = "show-rgb-u8")]
    pub fn set_show_rgb_u8(&self, show_rgb_u8: bool) {
        ObjectExt::set_property(self,"show-rgb-u8", show_rgb_u8)
    }

    #[doc(alias = "simulation-gamut-check")]
    pub fn set_simulation_gamut_check(&self, simulation_gamut_check: bool) {
        ObjectExt::set_property(self,"simulation-gamut-check", simulation_gamut_check)
    }

    #[doc(alias = "simulation-optimize")]
    pub fn set_simulation_optimize(&self, simulation_optimize: bool) {
        ObjectExt::set_property(self,"simulation-optimize", simulation_optimize)
    }

    //#[doc(alias = "simulation-profile")]
    //pub fn simulation_profile(&self) -> /*Ignored*/Option<ConfigPath> {
    //    ObjectExt::property(self, "simulation-profile")
    //}

    //#[doc(alias = "simulation-profile")]
    //pub fn set_simulation_profile(&self, simulation_profile: /*Ignored*/Option<&ConfigPath>) {
    //    ObjectExt::set_property(self,"simulation-profile", simulation_profile)
    //}

    #[doc(alias = "simulation-rendering-intent")]
    pub fn simulation_rendering_intent(&self) -> ColorRenderingIntent {
        ObjectExt::property(self, "simulation-rendering-intent")
    }

    #[doc(alias = "simulation-rendering-intent")]
    pub fn set_simulation_rendering_intent(&self, simulation_rendering_intent: ColorRenderingIntent) {
        ObjectExt::set_property(self,"simulation-rendering-intent", simulation_rendering_intent)
    }

    #[doc(alias = "simulation-use-black-point-compensation")]
    pub fn is_simulation_use_black_point_compensation(&self) -> bool {
        ObjectExt::property(self, "simulation-use-black-point-compensation")
    }

    #[doc(alias = "simulation-use-black-point-compensation")]
    pub fn set_simulation_use_black_point_compensation(&self, simulation_use_black_point_compensation: bool) {
        ObjectExt::set_property(self,"simulation-use-black-point-compensation", simulation_use_black_point_compensation)
    }

    #[doc(alias = "cmyk-profile")]
    pub fn connect_cmyk_profile_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cmyk_profile_trampoline<F: Fn(&ColorConfig) + 'static>(this: *mut ffi::GimpColorConfig, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::cmyk-profile".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_cmyk_profile_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "display-optimize")]
    pub fn connect_display_optimize_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_display_optimize_trampoline<F: Fn(&ColorConfig) + 'static>(this: *mut ffi::GimpColorConfig, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::display-optimize".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_display_optimize_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "display-profile")]
    pub fn connect_display_profile_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_display_profile_trampoline<F: Fn(&ColorConfig) + 'static>(this: *mut ffi::GimpColorConfig, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::display-profile".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_display_profile_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "display-profile-from-gdk")]
    pub fn connect_display_profile_from_gdk_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_display_profile_from_gdk_trampoline<F: Fn(&ColorConfig) + 'static>(this: *mut ffi::GimpColorConfig, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::display-profile-from-gdk".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_display_profile_from_gdk_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "display-rendering-intent")]
    pub fn connect_display_rendering_intent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_display_rendering_intent_trampoline<F: Fn(&ColorConfig) + 'static>(this: *mut ffi::GimpColorConfig, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::display-rendering-intent".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_display_rendering_intent_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "display-use-black-point-compensation")]
    pub fn connect_display_use_black_point_compensation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_display_use_black_point_compensation_trampoline<F: Fn(&ColorConfig) + 'static>(this: *mut ffi::GimpColorConfig, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::display-use-black-point-compensation".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_display_use_black_point_compensation_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "gray-profile")]
    pub fn connect_gray_profile_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_gray_profile_trampoline<F: Fn(&ColorConfig) + 'static>(this: *mut ffi::GimpColorConfig, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::gray-profile".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_gray_profile_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "mode")]
    pub fn connect_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_mode_trampoline<F: Fn(&ColorConfig) + 'static>(this: *mut ffi::GimpColorConfig, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::mode".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_mode_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "out-of-gamut-color")]
    pub fn connect_out_of_gamut_color_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_out_of_gamut_color_trampoline<F: Fn(&ColorConfig) + 'static>(this: *mut ffi::GimpColorConfig, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::out-of-gamut-color".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_out_of_gamut_color_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "rgb-profile")]
    pub fn connect_rgb_profile_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_rgb_profile_trampoline<F: Fn(&ColorConfig) + 'static>(this: *mut ffi::GimpColorConfig, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::rgb-profile".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_rgb_profile_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "show-hsv")]
    pub fn connect_show_hsv_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_show_hsv_trampoline<F: Fn(&ColorConfig) + 'static>(this: *mut ffi::GimpColorConfig, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::show-hsv".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_show_hsv_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "show-rgb-u8")]
    pub fn connect_show_rgb_u8_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_show_rgb_u8_trampoline<F: Fn(&ColorConfig) + 'static>(this: *mut ffi::GimpColorConfig, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::show-rgb-u8".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_show_rgb_u8_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "simulation-gamut-check")]
    pub fn connect_simulation_gamut_check_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_simulation_gamut_check_trampoline<F: Fn(&ColorConfig) + 'static>(this: *mut ffi::GimpColorConfig, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::simulation-gamut-check".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_simulation_gamut_check_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "simulation-optimize")]
    pub fn connect_simulation_optimize_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_simulation_optimize_trampoline<F: Fn(&ColorConfig) + 'static>(this: *mut ffi::GimpColorConfig, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::simulation-optimize".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_simulation_optimize_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "simulation-profile")]
    pub fn connect_simulation_profile_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_simulation_profile_trampoline<F: Fn(&ColorConfig) + 'static>(this: *mut ffi::GimpColorConfig, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::simulation-profile".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_simulation_profile_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "simulation-rendering-intent")]
    pub fn connect_simulation_rendering_intent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_simulation_rendering_intent_trampoline<F: Fn(&ColorConfig) + 'static>(this: *mut ffi::GimpColorConfig, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::simulation-rendering-intent".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_simulation_rendering_intent_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "simulation-use-black-point-compensation")]
    pub fn connect_simulation_use_black_point_compensation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_simulation_use_black_point_compensation_trampoline<F: Fn(&ColorConfig) + 'static>(this: *mut ffi::GimpColorConfig, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"notify::simulation-use-black-point-compensation".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_simulation_use_black_point_compensation_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}
