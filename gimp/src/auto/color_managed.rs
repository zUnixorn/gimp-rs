// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{ffi,ColorProfile,ColorRenderingIntent};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "GimpColorManaged")]
    pub struct ColorManaged(Interface<ffi::GimpColorManaged, ffi::GimpColorManagedInterface>);

    match fn {
        type_ => || ffi::gimp_color_managed_get_type(),
    }
}

impl ColorManaged {
        pub const NONE: Option<&'static ColorManaged> = None;
    
}

pub trait ColorManagedExt: IsA<ColorManaged> + 'static {
    #[doc(alias = "gimp_color_managed_get_color_profile")]
    #[doc(alias = "get_color_profile")]
    fn color_profile(&self) -> Option<ColorProfile> {
        unsafe {
            from_glib_full(ffi::gimp_color_managed_get_color_profile(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_color_managed_get_icc_profile")]
    #[doc(alias = "get_icc_profile")]
    fn icc_profile(&self) -> Vec<u8> {
        unsafe {
            let mut len = std::mem::MaybeUninit::uninit();
            let ret = FromGlibContainer::from_glib_none_num(ffi::gimp_color_managed_get_icc_profile(self.as_ref().to_glib_none().0, len.as_mut_ptr()), len.assume_init() as _);
            ret
        }
    }

    #[doc(alias = "gimp_color_managed_get_simulation_bpc")]
    #[doc(alias = "get_simulation_bpc")]
    fn is_simulation_bpc(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_color_managed_get_simulation_bpc(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_color_managed_get_simulation_intent")]
    #[doc(alias = "get_simulation_intent")]
    fn simulation_intent(&self) -> ColorRenderingIntent {
        unsafe {
            from_glib(ffi::gimp_color_managed_get_simulation_intent(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_color_managed_get_simulation_profile")]
    #[doc(alias = "get_simulation_profile")]
    fn simulation_profile(&self) -> Option<ColorProfile> {
        unsafe {
            from_glib_full(ffi::gimp_color_managed_get_simulation_profile(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_color_managed_profile_changed")]
    fn profile_changed(&self) {
        unsafe {
            ffi::gimp_color_managed_profile_changed(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "gimp_color_managed_simulation_bpc_changed")]
    fn simulation_bpc_changed(&self) {
        unsafe {
            ffi::gimp_color_managed_simulation_bpc_changed(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "gimp_color_managed_simulation_intent_changed")]
    fn simulation_intent_changed(&self) {
        unsafe {
            ffi::gimp_color_managed_simulation_intent_changed(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "gimp_color_managed_simulation_profile_changed")]
    fn simulation_profile_changed(&self) {
        unsafe {
            ffi::gimp_color_managed_simulation_profile_changed(self.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "profile-changed")]
    fn connect_profile_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn profile_changed_trampoline<P: IsA<ColorManaged>, F: Fn(&P) + 'static>(this: *mut ffi::GimpColorManaged, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(ColorManaged::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"profile-changed".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(profile_changed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "simulation-bpc-changed")]
    fn connect_simulation_bpc_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn simulation_bpc_changed_trampoline<P: IsA<ColorManaged>, F: Fn(&P) + 'static>(this: *mut ffi::GimpColorManaged, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(ColorManaged::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"simulation-bpc-changed".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(simulation_bpc_changed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "simulation-intent-changed")]
    fn connect_simulation_intent_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn simulation_intent_changed_trampoline<P: IsA<ColorManaged>, F: Fn(&P) + 'static>(this: *mut ffi::GimpColorManaged, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(ColorManaged::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"simulation-intent-changed".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(simulation_intent_changed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "simulation-profile-changed")]
    fn connect_simulation_profile_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn simulation_profile_changed_trampoline<P: IsA<ColorManaged>, F: Fn(&P) + 'static>(this: *mut ffi::GimpColorManaged, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(ColorManaged::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, c"simulation-profile-changed".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(simulation_profile_changed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<ColorManaged>> ColorManagedExt for O {}
