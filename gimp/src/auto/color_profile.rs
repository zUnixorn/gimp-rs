// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{ffi,ColorRenderingIntent};
use glib::{prelude::*,translate::*};

glib::wrapper! {
    #[doc(alias = "GimpColorProfile")]
    pub struct ColorProfile(Object<ffi::GimpColorProfile, ffi::GimpColorProfileClass>);

    match fn {
        type_ => || ffi::gimp_color_profile_get_type(),
    }
}

impl ColorProfile {
    #[doc(alias = "gimp_color_profile_new_d50_gray_lab_trc")]
    pub fn new_d50_gray_lab_trc() -> ColorProfile {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::gimp_color_profile_new_d50_gray_lab_trc())
        }
    }

    #[doc(alias = "gimp_color_profile_new_d65_gray_linear")]
    pub fn new_d65_gray_linear() -> ColorProfile {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::gimp_color_profile_new_d65_gray_linear())
        }
    }

    #[doc(alias = "gimp_color_profile_new_d65_gray_srgb_trc")]
    pub fn new_d65_gray_srgb_trc() -> ColorProfile {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::gimp_color_profile_new_d65_gray_srgb_trc())
        }
    }

    #[doc(alias = "gimp_color_profile_new_from_file")]
    #[doc(alias = "new_from_file")]
    pub fn from_file(file: &impl IsA<gio::File>) -> Result<Option<ColorProfile>, glib::Error> {
        assert_initialized_main_thread!();
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::gimp_color_profile_new_from_file(file.as_ref().to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "gimp_color_profile_new_from_icc_profile")]
    #[doc(alias = "new_from_icc_profile")]
    pub fn from_icc_profile(data: &[u8]) -> Result<Option<ColorProfile>, glib::Error> {
        assert_initialized_main_thread!();
        let length = data.len() as _;
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::gimp_color_profile_new_from_icc_profile(data.to_glib_none().0, length, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[doc(alias = "gimp_color_profile_new_from_lcms_profile")]
    //#[doc(alias = "new_from_lcms_profile")]
    //pub fn from_lcms_profile(lcms_profile: /*Unimplemented*/Option<Basic: Pointer>) -> Result<Option<ColorProfile>, glib::Error> {
    //    unsafe { TODO: call ffi:gimp_color_profile_new_from_lcms_profile() }
    //}

    #[doc(alias = "gimp_color_profile_new_rgb_adobe")]
    pub fn new_rgb_adobe() -> ColorProfile {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::gimp_color_profile_new_rgb_adobe())
        }
    }

    #[doc(alias = "gimp_color_profile_new_rgb_srgb")]
    pub fn new_rgb_srgb() -> ColorProfile {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::gimp_color_profile_new_rgb_srgb())
        }
    }

    #[doc(alias = "gimp_color_profile_new_rgb_srgb_linear")]
    pub fn new_rgb_srgb_linear() -> ColorProfile {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::gimp_color_profile_new_rgb_srgb_linear())
        }
    }

    #[doc(alias = "gimp_color_profile_get_copyright")]
    #[doc(alias = "get_copyright")]
    pub fn copyright(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gimp_color_profile_get_copyright(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_color_profile_get_description")]
    #[doc(alias = "get_description")]
    pub fn description(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gimp_color_profile_get_description(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_color_profile_get_format")]
    #[doc(alias = "get_format")]
    pub fn format(&self, format: &babl::Object, intent: ColorRenderingIntent) -> Result<babl::Object, glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::gimp_color_profile_get_format(self.to_glib_none().0, format.to_glib_none().0, intent.into_glib(), &mut error);
            if error.is_null() { Ok(from_glib_none(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "gimp_color_profile_get_icc_profile")]
    #[doc(alias = "get_icc_profile")]
    pub fn icc_profile(&self) -> Vec<u8> {
        unsafe {
            let mut length = std::mem::MaybeUninit::uninit();
            let ret = FromGlibContainer::from_glib_none_num(ffi::gimp_color_profile_get_icc_profile(self.to_glib_none().0, length.as_mut_ptr()), length.assume_init() as _);
            ret
        }
    }

    #[doc(alias = "gimp_color_profile_get_label")]
    #[doc(alias = "get_label")]
    pub fn label(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gimp_color_profile_get_label(self.to_glib_none().0))
        }
    }

    //#[doc(alias = "gimp_color_profile_get_lcms_profile")]
    //#[doc(alias = "get_lcms_profile")]
    //pub fn lcms_profile(&self) -> /*Unimplemented*/Option<Basic: Pointer> {
    //    unsafe { TODO: call ffi:gimp_color_profile_get_lcms_profile() }
    //}

    #[doc(alias = "gimp_color_profile_get_manufacturer")]
    #[doc(alias = "get_manufacturer")]
    pub fn manufacturer(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gimp_color_profile_get_manufacturer(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_color_profile_get_model")]
    #[doc(alias = "get_model")]
    pub fn model(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gimp_color_profile_get_model(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_color_profile_get_space")]
    #[doc(alias = "get_space")]
    pub fn space(&self, intent: ColorRenderingIntent) -> Result<babl::Object, glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::gimp_color_profile_get_space(self.to_glib_none().0, intent.into_glib(), &mut error);
            if error.is_null() { Ok(from_glib_none(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "gimp_color_profile_get_summary")]
    #[doc(alias = "get_summary")]
    pub fn summary(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gimp_color_profile_get_summary(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_color_profile_is_cmyk")]
    pub fn is_cmyk(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_color_profile_is_cmyk(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_color_profile_is_equal")]
    pub fn is_equal(&self, profile2: &ColorProfile) -> bool {
        unsafe {
            from_glib(ffi::gimp_color_profile_is_equal(self.to_glib_none().0, profile2.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_color_profile_is_gray")]
    pub fn is_gray(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_color_profile_is_gray(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_color_profile_is_linear")]
    pub fn is_linear(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_color_profile_is_linear(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_color_profile_is_rgb")]
    pub fn is_rgb(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_color_profile_is_rgb(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_color_profile_new_linear_from_color_profile")]
#[must_use]
    pub fn new_linear_from_color_profile(&self) -> Option<ColorProfile> {
        unsafe {
            from_glib_full(ffi::gimp_color_profile_new_linear_from_color_profile(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_color_profile_new_srgb_trc_from_color_profile")]
#[must_use]
    pub fn new_srgb_trc_from_color_profile(&self) -> Option<ColorProfile> {
        unsafe {
            from_glib_full(ffi::gimp_color_profile_new_srgb_trc_from_color_profile(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_color_profile_save_to_file")]
    pub fn save_to_file(&self, file: &impl IsA<gio::File>) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok = ffi::gimp_color_profile_save_to_file(self.to_glib_none().0, file.as_ref().to_glib_none().0, &mut error);
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "gimp_color_profile_get_lcms_format")]
    #[doc(alias = "get_lcms_format")]
    pub fn lcms_format(format: &babl::Object) -> (Option<babl::Object>, u32) {
        assert_initialized_main_thread!();
        unsafe {
            let mut lcms_format = std::mem::MaybeUninit::uninit();
            let ret = from_glib_none(ffi::gimp_color_profile_get_lcms_format(format.to_glib_none().0, lcms_format.as_mut_ptr()));
            (ret, lcms_format.assume_init())
        }
    }
}
