// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{ffi};
use glib::{prelude::*,translate::*};

glib::wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct ConfigWriter(Shared<ffi::GimpConfigWriter>);

    match fn {
        ref => |ptr| ffi::gimp_config_writer_ref(ptr),
        unref => |ptr| ffi::gimp_config_writer_unref(ptr),
        type_ => || ffi::gimp_config_writer_get_type(),
    }
}

impl ConfigWriter {
    #[doc(alias = "gimp_config_writer_new_from_fd")]
    #[doc(alias = "new_from_fd")]
    pub fn from_fd(fd: i32) -> Option<ConfigWriter> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::gimp_config_writer_new_from_fd(fd))
        }
    }

    #[doc(alias = "gimp_config_writer_new_from_file")]
    #[doc(alias = "new_from_file")]
    pub fn from_file(file: &impl IsA<gio::File>, atomic: bool, header: &str) -> Result<Option<ConfigWriter>, glib::Error> {
        assert_initialized_main_thread!();
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::gimp_config_writer_new_from_file(file.as_ref().to_glib_none().0, atomic.into_glib(), header.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "gimp_config_writer_new_from_stream")]
    #[doc(alias = "new_from_stream")]
    pub fn from_stream(output: &impl IsA<gio::OutputStream>, header: &str) -> Result<Option<ConfigWriter>, glib::Error> {
        assert_initialized_main_thread!();
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::gimp_config_writer_new_from_stream(output.as_ref().to_glib_none().0, header.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "gimp_config_writer_close")]
    pub fn close(&self) {
        unsafe {
            ffi::gimp_config_writer_close(self.to_glib_none().0);
        }
    }

    #[doc(alias = "gimp_config_writer_comment")]
    pub fn comment(&self, comment: &str) {
        unsafe {
            ffi::gimp_config_writer_comment(self.to_glib_none().0, comment.to_glib_none().0);
        }
    }

    #[doc(alias = "gimp_config_writer_comment_mode")]
    pub fn comment_mode(&self, enable: bool) {
        unsafe {
            ffi::gimp_config_writer_comment_mode(self.to_glib_none().0, enable.into_glib());
        }
    }

    #[doc(alias = "gimp_config_writer_data")]
    pub fn data(&self, data: &[u8]) {
        let length = data.len() as _;
        unsafe {
            ffi::gimp_config_writer_data(self.to_glib_none().0, length, data.to_glib_none().0);
        }
    }

    #[doc(alias = "gimp_config_writer_finish")]
    pub fn finish(&self, footer: &str) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok = ffi::gimp_config_writer_finish(self.to_glib_none().0, footer.to_glib_none().0, &mut error);
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "gimp_config_writer_identifier")]
    pub fn identifier(&self, identifier: &str) {
        unsafe {
            ffi::gimp_config_writer_identifier(self.to_glib_none().0, identifier.to_glib_none().0);
        }
    }

    #[doc(alias = "gimp_config_writer_linefeed")]
    pub fn linefeed(&self) {
        unsafe {
            ffi::gimp_config_writer_linefeed(self.to_glib_none().0);
        }
    }

    #[doc(alias = "gimp_config_writer_open")]
    pub fn open(&self, name: &str) {
        unsafe {
            ffi::gimp_config_writer_open(self.to_glib_none().0, name.to_glib_none().0);
        }
    }

    #[doc(alias = "gimp_config_writer_print")]
    pub fn print(&self, string: &str) {
        let len = string.len() as _;
        unsafe {
            ffi::gimp_config_writer_print(self.to_glib_none().0, string.to_glib_none().0, len);
        }
    }

    //#[doc(alias = "gimp_config_writer_printf")]
    //pub fn printf(&self, format: &str, : /*Unknown conversion*//*Unimplemented*/Basic: VarArgs) {
    //    unsafe { TODO: call ffi:gimp_config_writer_printf() }
    //}

    #[doc(alias = "gimp_config_writer_revert")]
    pub fn revert(&self) {
        unsafe {
            ffi::gimp_config_writer_revert(self.to_glib_none().0);
        }
    }

    #[doc(alias = "gimp_config_writer_string")]
    pub fn string(&self, string: &str) {
        unsafe {
            ffi::gimp_config_writer_string(self.to_glib_none().0, string.to_glib_none().0);
        }
    }
}
