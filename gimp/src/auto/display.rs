// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{ffi,Image};
use glib::{translate::*};

glib::wrapper! {
    #[doc(alias = "GimpDisplay")]
    pub struct Display(Object<ffi::GimpDisplay, ffi::GimpDisplayClass>);

    match fn {
        type_ => || ffi::gimp_display_get_type(),
    }
}

impl Display {
    #[doc(alias = "gimp_display_new")]
    pub fn new(image: &Image) -> Display {
        skip_assert_initialized!();
        unsafe {
            from_glib_none(ffi::gimp_display_new(image.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_display_delete")]
    pub fn delete(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_display_delete(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_display_get_id")]
    #[doc(alias = "get_id")]
    pub fn id(&self) -> i32 {
        unsafe {
            ffi::gimp_display_get_id(self.to_glib_none().0)
        }
    }

    #[doc(alias = "gimp_display_get_window_handle")]
    #[doc(alias = "get_window_handle")]
    pub fn window_handle(&self) -> Option<glib::Bytes> {
        unsafe {
            from_glib_full(ffi::gimp_display_get_window_handle(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_display_is_valid")]
    pub fn is_valid(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_display_is_valid(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_display_present")]
    pub fn present(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_display_present(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_display_get_by_id")]
    #[doc(alias = "get_by_id")]
    pub fn by_id(display_id: i32) -> Option<Display> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::gimp_display_get_by_id(display_id))
        }
    }

    #[doc(alias = "gimp_display_id_is_valid")]
    pub fn id_is_valid(display_id: i32) -> bool {
        assert_initialized_main_thread!();
        unsafe {
            from_glib(ffi::gimp_display_id_is_valid(display_id))
        }
    }

    #[doc(alias = "gimp_display_name")]
    pub fn name() -> Option<glib::GString> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::gimp_display_name())
        }
    }
}
