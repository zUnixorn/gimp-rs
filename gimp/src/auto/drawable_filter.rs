// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{ffi,Drawable,DrawableFilterConfig,LayerMode};
use glib::{prelude::*,translate::*};

glib::wrapper! {
    /// Operations on drawable filters: creation, editing.
    ///
    /// ## Properties
    ///
    ///
    /// #### `id`
    ///  Readable | Writeable | Construct Only
    ///
    /// # Implements
    ///
    /// [`trait@glib::ObjectExt`]
    #[doc(alias = "GimpDrawableFilter")]
    pub struct DrawableFilter(Object<ffi::GimpDrawableFilter, ffi::GimpDrawableFilterClass>);

    match fn {
        type_ => || ffi::gimp_drawable_filter_get_type(),
    }
}

impl DrawableFilter {
    /// Create a new drawable filter.
    ///
    /// This procedure creates a new filter for the specified operation on
    /// `drawable`.
    /// The new effect still needs to be either added or merged to `drawable`
    /// later. Add the effect non-destructively with
    /// [method`Gimp`.append_filter].
    /// Currently only layers can have non-destructive effects. The effects
    /// must be merged for all other types of drawable.
    /// ## `drawable`
    /// The drawable.
    /// ## `operation_name`
    /// The GEGL operation's name.
    /// ## `name`
    /// The effect name.
    ///
    /// # Returns
    ///
    /// The newly created filter.
    #[doc(alias = "gimp_drawable_filter_new")]
    pub fn new(drawable: &impl IsA<Drawable>, operation_name: &str, name: Option<&str>) -> DrawableFilter {
        skip_assert_initialized!();
        unsafe {
            from_glib_none(ffi::gimp_drawable_filter_new(drawable.as_ref().to_glib_none().0, operation_name.to_glib_none().0, name.to_glib_none().0))
        }
    }

    /// Delete a drawable filter.
    ///
    /// This procedure deletes the specified filter. This must not be done
    /// if the drawable whose this filter was applied to was already deleted
    /// or if the drawable was already removed from the image.
    /// Do not use anymore the `self` object after having deleted it.
    ///
    /// # Returns
    ///
    /// TRUE on success.
    #[doc(alias = "gimp_drawable_filter_delete")]
    pub fn delete(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_drawable_filter_delete(self.to_glib_none().0))
        }
    }

    /// Get the blending mode of the specified filter.
    ///
    /// This procedure returns the specified filter's mode.
    ///
    /// # Returns
    ///
    /// The effect blending mode.
    #[doc(alias = "gimp_drawable_filter_get_blend_mode")]
    #[doc(alias = "get_blend_mode")]
    pub fn blend_mode(&self) -> LayerMode {
        unsafe {
            from_glib(ffi::gimp_drawable_filter_get_blend_mode(self.to_glib_none().0))
        }
    }

    /// Get the `GimpConfig` with properties that match `self`'s arguments.
    ///
    /// The config object will be created at the first call of this method
    /// and its properties will be synced with the settings of this filter as
    /// set in the core application.
    ///
    /// Further changes to the config's properties are not synced back
    /// immediately with the core application. Use
    /// [method`Gimp`.update] to trigger an actual update.
    ///
    /// # Returns
    ///
    /// The [`DrawableFilterConfig`][crate::DrawableFilterConfig]. Further
    ///  calls will return the same object.
    #[doc(alias = "gimp_drawable_filter_get_config")]
    #[doc(alias = "get_config")]
    pub fn config(&self) -> Option<DrawableFilterConfig> {
        unsafe {
            from_glib_none(ffi::gimp_drawable_filter_get_config(self.to_glib_none().0))
        }
    }

    ///
    /// # Returns
    ///
    /// the drawable's filter ID.
    #[doc(alias = "gimp_drawable_filter_get_id")]
    #[doc(alias = "get_id")]
    pub fn id(&self) -> i32 {
        unsafe {
            ffi::gimp_drawable_filter_get_id(self.to_glib_none().0)
        }
    }

    /// Get a drawable filter's name.
    ///
    /// This procedure returns the specified filter's name.
    /// Since it is not possible to set a drawable filter's name yet, this
    /// will be the operation's name. Eventually this filter's name will be
    /// a free form field so do not rely on this information for any
    /// processing.
    ///
    /// # Returns
    ///
    /// The filter's name.
    ///  The returned value must be freed with `g_free()`.
    #[doc(alias = "gimp_drawable_filter_get_name")]
    #[doc(alias = "get_name")]
    pub fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::gimp_drawable_filter_get_name(self.to_glib_none().0))
        }
    }

    /// Get the opacity of the specified filter.
    ///
    /// This procedure returns the specified filter's opacity.
    ///
    /// # Returns
    ///
    /// The filter's opacity.
    #[doc(alias = "gimp_drawable_filter_get_opacity")]
    #[doc(alias = "get_opacity")]
    pub fn opacity(&self) -> f64 {
        unsafe {
            ffi::gimp_drawable_filter_get_opacity(self.to_glib_none().0)
        }
    }

    /// Get a drawable filter's operation name.
    ///
    /// This procedure returns the specified filter's operation name.
    ///
    /// # Returns
    ///
    /// The filter's operation name.
    ///  The returned value must be freed with `g_free()`.
    #[doc(alias = "gimp_drawable_filter_get_operation_name")]
    #[doc(alias = "get_operation_name")]
    pub fn operation_name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::gimp_drawable_filter_get_operation_name(self.to_glib_none().0))
        }
    }

    /// Get the visibility of the specified filter.
    ///
    /// This procedure returns the specified filter's visibility.
    ///
    /// # Returns
    ///
    /// The filter visibility.
    #[doc(alias = "gimp_drawable_filter_get_visible")]
    #[doc(alias = "get_visible")]
    pub fn is_visible(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_drawable_filter_get_visible(self.to_glib_none().0))
        }
    }

    /// Returns TRUE if the `drawable_filter` is valid.
    ///
    /// This procedure checks if the given filter is valid and refers to an
    /// existing `GimpDrawableFilter`.
    ///
    /// # Returns
    ///
    /// Whether `drawable_filter` is valid.
    #[doc(alias = "gimp_drawable_filter_is_valid")]
    pub fn is_valid(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_drawable_filter_is_valid(self.to_glib_none().0))
        }
    }

    /// When a filter has one or several auxiliary inputs, you can use this
    /// function to set them.
    ///
    /// The change is not synced immediately with the core application.
    /// Use [method`Gimp`.update] to trigger an actual update.
    /// ## `input_pad_name`
    /// name of the filter's input pad.
    /// ## `input`
    /// the drawable to use as auxiliary input.
    #[doc(alias = "gimp_drawable_filter_set_aux_input")]
    pub fn set_aux_input(&self, input_pad_name: &str, input: &impl IsA<Drawable>) {
        unsafe {
            ffi::gimp_drawable_filter_set_aux_input(self.to_glib_none().0, input_pad_name.to_glib_none().0, input.as_ref().to_glib_none().0);
        }
    }

    /// This procedure sets the blend mode of `self`.
    ///
    /// The change is not synced immediately with the core application.
    /// Use [method`Gimp`.update] to trigger an actual update.
    /// ## `mode`
    /// blend mode.
    #[doc(alias = "gimp_drawable_filter_set_blend_mode")]
    pub fn set_blend_mode(&self, mode: LayerMode) {
        unsafe {
            ffi::gimp_drawable_filter_set_blend_mode(self.to_glib_none().0, mode.into_glib());
        }
    }

    /// This procedure sets the opacity of `self` on a range from 0.0
    /// (transparent) to 1.0 (opaque).
    ///
    /// The change is not synced immediately with the core application.
    /// Use [method`Gimp`.update] to trigger an actual update.
    /// ## `opacity`
    /// the opacity.
    #[doc(alias = "gimp_drawable_filter_set_opacity")]
    pub fn set_opacity(&self, opacity: f64) {
        unsafe {
            ffi::gimp_drawable_filter_set_opacity(self.to_glib_none().0, opacity);
        }
    }

    /// Set the visibility of the specified filter.
    ///
    /// This procedure sets the specified filter's visibility.
    /// The drawable won't be immediately rendered. Use
    /// [method`Gimp`.update] to trigger an update.
    /// ## `visible`
    /// The new filter visibility.
    ///
    /// # Returns
    ///
    /// TRUE on success.
    #[doc(alias = "gimp_drawable_filter_set_visible")]
    pub fn set_visible(&self, visible: bool) -> bool {
        unsafe {
            from_glib(ffi::gimp_drawable_filter_set_visible(self.to_glib_none().0, visible.into_glib()))
        }
    }

    /// Syncs the `GimpConfig` with properties that match `self`'s arguments.
    /// This procedure updates the settings of the specified filter all at
    /// once, including the arguments of the [class`Gimp`]
    /// obtained with [method`Gimp`.get_config] as well as the
    /// blend mode and opacity.
    ///
    /// In particular, if the image is displayed, rendering will be frozen
    /// and will happen only once for all changed settings.
    #[doc(alias = "gimp_drawable_filter_update")]
    pub fn update(&self) {
        unsafe {
            ffi::gimp_drawable_filter_update(self.to_glib_none().0);
        }
    }

    /// ## `filter_id`
    /// The `GimpDrawableFilter` id.
    ///
    /// # Returns
    ///
    /// a [`DrawableFilter`][crate::DrawableFilter] for `filter_id` or
    ///  [`None`] if `filter_id` does not represent a valid drawable's filter.
    ///  The object belongs to libgimp and you must not modify
    ///  or unref it.
    #[doc(alias = "gimp_drawable_filter_get_by_id")]
    #[doc(alias = "get_by_id")]
    pub fn by_id(filter_id: i32) -> Option<DrawableFilter> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::gimp_drawable_filter_get_by_id(filter_id))
        }
    }

    /// Returns [`true`] if the drawable filter ID is valid.
    ///
    /// This procedure checks if the given drawable filter ID is valid and
    /// refers to an existing filter.
    /// ## `filter_id`
    /// The filter ID to check.
    ///
    /// # Returns
    ///
    /// Whether the filter ID is valid.
    #[doc(alias = "gimp_drawable_filter_id_is_valid")]
    pub fn id_is_valid(filter_id: i32) -> bool {
        assert_initialized_main_thread!();
        unsafe {
            from_glib(ffi::gimp_drawable_filter_id_is_valid(filter_id))
        }
    }
}
