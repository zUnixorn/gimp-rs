// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{ffi,Procedure};
use glib::{prelude::*,translate::*};

glib::wrapper! {
    /// File procedures implement file support. They cannot be created directly.
    /// Instead, you will create an instance of one of the sublasses (such as export
    /// or load procedures). This provides a common interface for file-related
    /// functions on these objects.
    ///
    /// This is an Abstract Base Class, you cannot instantiate it.
    ///
    /// # Implements
    ///
    /// [`FileProcedureExt`][trait@crate::prelude::FileProcedureExt], [`ProcedureExt`][trait@crate::prelude::ProcedureExt], [`trait@glib::ObjectExt`], [`ProcedureExtManual`][trait@crate::prelude::ProcedureExtManual]
    #[doc(alias = "GimpFileProcedure")]
    pub struct FileProcedure(Object<ffi::GimpFileProcedure, ffi::GimpFileProcedureClass>) @extends Procedure;

    match fn {
        type_ => || ffi::gimp_file_procedure_get_type(),
    }
}

impl FileProcedure {
        pub const NONE: Option<&'static FileProcedure> = None;
    
}

/// Trait containing all [`struct@FileProcedure`] methods.
///
/// # Implementors
///
/// [`FileProcedure`][struct@crate::FileProcedure], [`LoadProcedure`][struct@crate::LoadProcedure]
pub trait FileProcedureExt: IsA<FileProcedure> + 'static {
    /// Returns the procedure's extensions as set with
    /// [method`FileProcedure`].
    ///
    /// # Returns
    ///
    /// The procedure's registered extensions.
    #[doc(alias = "gimp_file_procedure_get_extensions")]
    #[doc(alias = "get_extensions")]
    fn extensions(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gimp_file_procedure_get_extensions(self.as_ref().to_glib_none().0))
        }
    }

    /// Returns the procedure's format name, as set with
    /// [method`FileProcedure`].
    ///
    /// # Returns
    ///
    /// The procedure's format name.
    #[doc(alias = "gimp_file_procedure_get_format_name")]
    #[doc(alias = "get_format_name")]
    fn format_name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gimp_file_procedure_get_format_name(self.as_ref().to_glib_none().0))
        }
    }

    /// Returns the procedure's 'handles remote' flags as set with
    /// [method`FileProcedure`].
    ///
    /// # Returns
    ///
    /// The procedure's 'handles remote' flag
    #[doc(alias = "gimp_file_procedure_get_handles_remote")]
    #[doc(alias = "get_handles_remote")]
    fn is_handles_remote(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_file_procedure_get_handles_remote(self.as_ref().to_glib_none().0))
        }
    }

    /// Returns the procedure's magics as set with [method`FileProcedure`].
    ///
    /// # Returns
    ///
    /// The procedure's registered magics.
    #[doc(alias = "gimp_file_procedure_get_magics")]
    #[doc(alias = "get_magics")]
    fn magics(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gimp_file_procedure_get_magics(self.as_ref().to_glib_none().0))
        }
    }

    /// Returns the procedure's mime-type as set with
    /// [method`FileProcedure`].
    ///
    /// # Returns
    ///
    /// The procedure's registered mime-types.
    #[doc(alias = "gimp_file_procedure_get_mime_types")]
    #[doc(alias = "get_mime_types")]
    fn mime_types(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gimp_file_procedure_get_mime_types(self.as_ref().to_glib_none().0))
        }
    }

    /// Returns the procedure's prefixes as set with
    /// [method`FileProcedure`].
    ///
    /// # Returns
    ///
    /// The procedure's registered prefixes.
    #[doc(alias = "gimp_file_procedure_get_prefixes")]
    #[doc(alias = "get_prefixes")]
    fn prefixes(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gimp_file_procedure_get_prefixes(self.as_ref().to_glib_none().0))
        }
    }

    /// Returns the procedure's priority as set with
    /// [method`FileProcedure`].
    ///
    /// # Returns
    ///
    /// The procedure's registered priority.
    #[doc(alias = "gimp_file_procedure_get_priority")]
    #[doc(alias = "get_priority")]
    fn priority(&self) -> i32 {
        unsafe {
            ffi::gimp_file_procedure_get_priority(self.as_ref().to_glib_none().0)
        }
    }

    /// Registers the given list of extensions as something this procedure can
    /// handle.
    /// ## `extensions`
    /// A comma separated list of extensions this procedure can
    ///  handle (i.e. "jpg,jpeg").
    #[doc(alias = "gimp_file_procedure_set_extensions")]
    fn set_extensions(&self, extensions: &str) {
        unsafe {
            ffi::gimp_file_procedure_set_extensions(self.as_ref().to_glib_none().0, extensions.to_glib_none().0);
        }
    }

    /// Associates a format name with a file handler procedure.
    ///
    /// This name can be used for any public-facing strings, such as
    /// graphical interface labels. An example usage would be
    /// `GimpExportProcedureDialog` title looking like "Export Image as `s`".
    ///
    /// Note that since the format name is public-facing, it is recommended
    /// to localize it at runtime, for instance through gettext, like:
    ///
    /// **⚠️ The following code is in c ⚠️**
    ///
    /// ```c
    /// gimp_file_procedure_set_format_name (procedure, _("JPEG"));
    /// ```
    ///
    /// Some language would indeed localize even some technical terms or
    /// acronyms, even if sometimes just to rewrite them with the local
    /// writing system.
    /// ## `format_name`
    /// A public-facing name for the format, e.g. "PNG".
    #[doc(alias = "gimp_file_procedure_set_format_name")]
    fn set_format_name(&self, format_name: &str) {
        unsafe {
            ffi::gimp_file_procedure_set_format_name(self.as_ref().to_glib_none().0, format_name.to_glib_none().0);
        }
    }

    /// Registers a file procedure as capable of handling arbitrary remote
    /// URIs via GIO.
    ///
    /// When `handles_remote` is set to [`true`], the procedure will get a
    /// [`gio::File`][crate::gio::File] passed that can point to a remote file.
    ///
    /// When `handles_remote` is set to [`false`], the procedure will get a
    /// local [iface`Gio`] passed and can use [method`Gio`.get_path] to get
    /// to a filename that can be used with whatever non-GIO means of dealing with
    /// the file.
    /// ## `handles_remote`
    /// The procedure's 'handles remote' flag.
    #[doc(alias = "gimp_file_procedure_set_handles_remote")]
    fn set_handles_remote(&self, handles_remote: bool) {
        unsafe {
            ffi::gimp_file_procedure_set_handles_remote(self.as_ref().to_glib_none().0, handles_remote.into_glib());
        }
    }

    /// Registers the list of magic file information this procedure can handle.
    /// ## `magics`
    /// A comma-separated list of magic file information (i.e. "0,string,GIF").
    #[doc(alias = "gimp_file_procedure_set_magics")]
    fn set_magics(&self, magics: &str) {
        unsafe {
            ffi::gimp_file_procedure_set_magics(self.as_ref().to_glib_none().0, magics.to_glib_none().0);
        }
    }

    /// Associates MIME types with a file handler procedure.
    ///
    /// Registers MIME types for a file handler procedure. This allows GIMP
    /// to determine the MIME type of the file opened or saved using this
    /// procedure. It is recommended that only one MIME type is registered
    /// per file procedure; when registering more than one MIME type, GIMP
    /// will associate the first one with files opened or saved with this
    /// procedure.
    /// ## `mime_types`
    /// A comma-separated list of MIME types, such as "image/jpeg".
    #[doc(alias = "gimp_file_procedure_set_mime_types")]
    fn set_mime_types(&self, mime_types: &str) {
        unsafe {
            ffi::gimp_file_procedure_set_mime_types(self.as_ref().to_glib_none().0, mime_types.to_glib_none().0);
        }
    }

    /// It should almost never be necessary to register prefixes with file
    /// procedures, because most sorts of URIs should be handled by GIO.
    /// ## `prefixes`
    /// A comma separated list of prefixes this procedure can
    ///  handle (i.e. "http:,ftp:").
    #[doc(alias = "gimp_file_procedure_set_prefixes")]
    fn set_prefixes(&self, prefixes: &str) {
        unsafe {
            ffi::gimp_file_procedure_set_prefixes(self.as_ref().to_glib_none().0, prefixes.to_glib_none().0);
        }
    }

    /// Sets the priority of a file handler procedure.
    ///
    /// When more than one procedure matches a given file, the procedure with the
    /// lowest priority is used; if more than one procedure has the lowest priority,
    /// it is unspecified which one of them is used. The default priority for file
    /// handler procedures is 0.
    /// ## `priority`
    /// The procedure's priority.
    #[doc(alias = "gimp_file_procedure_set_priority")]
    fn set_priority(&self, priority: i32) {
        unsafe {
            ffi::gimp_file_procedure_set_priority(self.as_ref().to_glib_none().0, priority);
        }
    }
}

impl<O: IsA<FileProcedure>> FileProcedureExt for O {}
