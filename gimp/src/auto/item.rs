// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{ffi,ColorTag,Image,OrientationType,Parasite,RotationType};
use glib::{prelude::*,translate::*};

glib::wrapper! {
    #[doc(alias = "GimpItem")]
    pub struct Item(Object<ffi::GimpItem, ffi::GimpItemClass>);

    match fn {
        type_ => || ffi::gimp_item_get_type(),
    }
}

impl Item {
        pub const NONE: Option<&'static Item> = None;
    

    #[doc(alias = "gimp_item_get_by_id")]
    #[doc(alias = "get_by_id")]
    pub fn by_id(item_id: i32) -> Option<Item> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::gimp_item_get_by_id(item_id))
        }
    }

    #[doc(alias = "gimp_item_id_is_channel")]
    pub fn id_is_channel(item_id: i32) -> bool {
        assert_initialized_main_thread!();
        unsafe {
            from_glib(ffi::gimp_item_id_is_channel(item_id))
        }
    }

    #[doc(alias = "gimp_item_id_is_drawable")]
    pub fn id_is_drawable(item_id: i32) -> bool {
        assert_initialized_main_thread!();
        unsafe {
            from_glib(ffi::gimp_item_id_is_drawable(item_id))
        }
    }

    #[doc(alias = "gimp_item_id_is_group_layer")]
    pub fn id_is_group_layer(item_id: i32) -> bool {
        assert_initialized_main_thread!();
        unsafe {
            from_glib(ffi::gimp_item_id_is_group_layer(item_id))
        }
    }

    #[doc(alias = "gimp_item_id_is_layer")]
    pub fn id_is_layer(item_id: i32) -> bool {
        assert_initialized_main_thread!();
        unsafe {
            from_glib(ffi::gimp_item_id_is_layer(item_id))
        }
    }

    #[doc(alias = "gimp_item_id_is_layer_mask")]
    pub fn id_is_layer_mask(item_id: i32) -> bool {
        assert_initialized_main_thread!();
        unsafe {
            from_glib(ffi::gimp_item_id_is_layer_mask(item_id))
        }
    }

    #[doc(alias = "gimp_item_id_is_path")]
    pub fn id_is_path(item_id: i32) -> bool {
        assert_initialized_main_thread!();
        unsafe {
            from_glib(ffi::gimp_item_id_is_path(item_id))
        }
    }

    #[doc(alias = "gimp_item_id_is_selection")]
    pub fn id_is_selection(item_id: i32) -> bool {
        assert_initialized_main_thread!();
        unsafe {
            from_glib(ffi::gimp_item_id_is_selection(item_id))
        }
    }

    #[doc(alias = "gimp_item_id_is_text_layer")]
    pub fn id_is_text_layer(item_id: i32) -> bool {
        assert_initialized_main_thread!();
        unsafe {
            from_glib(ffi::gimp_item_id_is_text_layer(item_id))
        }
    }

    #[doc(alias = "gimp_item_id_is_valid")]
    pub fn id_is_valid(item_id: i32) -> bool {
        assert_initialized_main_thread!();
        unsafe {
            from_glib(ffi::gimp_item_id_is_valid(item_id))
        }
    }
}

pub trait ItemExt: IsA<Item> + 'static {
    #[doc(alias = "gimp_item_attach_parasite")]
    fn attach_parasite(&self, parasite: &Parasite) -> bool {
        unsafe {
            from_glib(ffi::gimp_item_attach_parasite(self.as_ref().to_glib_none().0, parasite.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_item_delete")]
    fn delete(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_item_delete(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_item_detach_parasite")]
    fn detach_parasite(&self, name: &str) -> bool {
        unsafe {
            from_glib(ffi::gimp_item_detach_parasite(self.as_ref().to_glib_none().0, name.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_item_get_children")]
    #[doc(alias = "get_children")]
    fn children(&self) -> Vec<Item> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::gimp_item_get_children(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_item_get_color_tag")]
    #[doc(alias = "get_color_tag")]
    fn color_tag(&self) -> ColorTag {
        unsafe {
            from_glib(ffi::gimp_item_get_color_tag(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_item_get_expanded")]
    #[doc(alias = "get_expanded")]
    fn is_expanded(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_item_get_expanded(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_item_get_id")]
    #[doc(alias = "get_id")]
    fn id(&self) -> i32 {
        unsafe {
            ffi::gimp_item_get_id(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "gimp_item_get_image")]
    #[doc(alias = "get_image")]
    fn image(&self) -> Option<Image> {
        unsafe {
            from_glib_none(ffi::gimp_item_get_image(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_item_get_lock_content")]
    #[doc(alias = "get_lock_content")]
    fn is_lock_content(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_item_get_lock_content(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_item_get_lock_position")]
    #[doc(alias = "get_lock_position")]
    fn is_lock_position(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_item_get_lock_position(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_item_get_lock_visibility")]
    #[doc(alias = "get_lock_visibility")]
    fn is_lock_visibility(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_item_get_lock_visibility(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_item_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::gimp_item_get_name(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_item_get_parasite")]
    #[doc(alias = "get_parasite")]
    fn parasite(&self, name: &str) -> Option<Parasite> {
        unsafe {
            from_glib_full(ffi::gimp_item_get_parasite(self.as_ref().to_glib_none().0, name.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_item_get_parasite_list")]
    #[doc(alias = "get_parasite_list")]
    fn parasite_list(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::gimp_item_get_parasite_list(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_item_get_parent")]
    #[doc(alias = "get_parent")]
#[must_use]
    fn parent(&self) -> Option<Item> {
        unsafe {
            from_glib_none(ffi::gimp_item_get_parent(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_item_get_tattoo")]
    #[doc(alias = "get_tattoo")]
    fn tattoo(&self) -> u32 {
        unsafe {
            ffi::gimp_item_get_tattoo(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "gimp_item_get_visible")]
    #[doc(alias = "get_visible")]
    fn is_visible(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_item_get_visible(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_item_is_channel")]
    fn is_channel(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_item_is_channel(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_item_is_drawable")]
    fn is_drawable(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_item_is_drawable(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_item_is_group")]
    fn is_group(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_item_is_group(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_item_is_group_layer")]
    fn is_group_layer(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_item_is_group_layer(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_item_is_layer")]
    fn is_layer(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_item_is_layer(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_item_is_layer_mask")]
    fn is_layer_mask(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_item_is_layer_mask(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_item_is_path")]
    fn is_path(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_item_is_path(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_item_is_selection")]
    fn is_selection(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_item_is_selection(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_item_is_text_layer")]
    fn is_text_layer(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_item_is_text_layer(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_item_is_valid")]
    fn is_valid(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_item_is_valid(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_item_list_children")]
    fn list_children(&self) -> Vec<Item> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::gimp_item_list_children(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_item_set_color_tag")]
    fn set_color_tag(&self, color_tag: ColorTag) -> bool {
        unsafe {
            from_glib(ffi::gimp_item_set_color_tag(self.as_ref().to_glib_none().0, color_tag.into_glib()))
        }
    }

    #[doc(alias = "gimp_item_set_expanded")]
    fn set_expanded(&self, expanded: bool) -> bool {
        unsafe {
            from_glib(ffi::gimp_item_set_expanded(self.as_ref().to_glib_none().0, expanded.into_glib()))
        }
    }

    #[doc(alias = "gimp_item_set_lock_content")]
    fn set_lock_content(&self, lock_content: bool) -> bool {
        unsafe {
            from_glib(ffi::gimp_item_set_lock_content(self.as_ref().to_glib_none().0, lock_content.into_glib()))
        }
    }

    #[doc(alias = "gimp_item_set_lock_position")]
    fn set_lock_position(&self, lock_position: bool) -> bool {
        unsafe {
            from_glib(ffi::gimp_item_set_lock_position(self.as_ref().to_glib_none().0, lock_position.into_glib()))
        }
    }

    #[doc(alias = "gimp_item_set_lock_visibility")]
    fn set_lock_visibility(&self, lock_visibility: bool) -> bool {
        unsafe {
            from_glib(ffi::gimp_item_set_lock_visibility(self.as_ref().to_glib_none().0, lock_visibility.into_glib()))
        }
    }

    #[doc(alias = "gimp_item_set_name")]
    fn set_name(&self, name: &str) -> bool {
        unsafe {
            from_glib(ffi::gimp_item_set_name(self.as_ref().to_glib_none().0, name.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_item_set_tattoo")]
    fn set_tattoo(&self, tattoo: u32) -> bool {
        unsafe {
            from_glib(ffi::gimp_item_set_tattoo(self.as_ref().to_glib_none().0, tattoo))
        }
    }

    #[doc(alias = "gimp_item_set_visible")]
    fn set_visible(&self, visible: bool) -> bool {
        unsafe {
            from_glib(ffi::gimp_item_set_visible(self.as_ref().to_glib_none().0, visible.into_glib()))
        }
    }

    #[doc(alias = "gimp_item_transform_2d")]
#[must_use]
    fn transform_2d(&self, source_x: f64, source_y: f64, scale_x: f64, scale_y: f64, angle: f64, dest_x: f64, dest_y: f64) -> Option<Item> {
        unsafe {
            from_glib_none(ffi::gimp_item_transform_2d(self.as_ref().to_glib_none().0, source_x, source_y, scale_x, scale_y, angle, dest_x, dest_y))
        }
    }

    #[doc(alias = "gimp_item_transform_flip")]
#[must_use]
    fn transform_flip(&self, x0: f64, y0: f64, x1: f64, y1: f64) -> Option<Item> {
        unsafe {
            from_glib_none(ffi::gimp_item_transform_flip(self.as_ref().to_glib_none().0, x0, y0, x1, y1))
        }
    }

    #[doc(alias = "gimp_item_transform_flip_simple")]
#[must_use]
    fn transform_flip_simple(&self, flip_type: OrientationType, auto_center: bool, axis: f64) -> Option<Item> {
        unsafe {
            from_glib_none(ffi::gimp_item_transform_flip_simple(self.as_ref().to_glib_none().0, flip_type.into_glib(), auto_center.into_glib(), axis))
        }
    }

    #[doc(alias = "gimp_item_transform_matrix")]
#[must_use]
    fn transform_matrix(&self, coeff_0_0: f64, coeff_0_1: f64, coeff_0_2: f64, coeff_1_0: f64, coeff_1_1: f64, coeff_1_2: f64, coeff_2_0: f64, coeff_2_1: f64, coeff_2_2: f64) -> Option<Item> {
        unsafe {
            from_glib_none(ffi::gimp_item_transform_matrix(self.as_ref().to_glib_none().0, coeff_0_0, coeff_0_1, coeff_0_2, coeff_1_0, coeff_1_1, coeff_1_2, coeff_2_0, coeff_2_1, coeff_2_2))
        }
    }

    #[doc(alias = "gimp_item_transform_perspective")]
#[must_use]
    fn transform_perspective(&self, x0: f64, y0: f64, x1: f64, y1: f64, x2: f64, y2: f64, x3: f64, y3: f64) -> Option<Item> {
        unsafe {
            from_glib_none(ffi::gimp_item_transform_perspective(self.as_ref().to_glib_none().0, x0, y0, x1, y1, x2, y2, x3, y3))
        }
    }

    #[doc(alias = "gimp_item_transform_rotate")]
#[must_use]
    fn transform_rotate(&self, angle: f64, auto_center: bool, center_x: f64, center_y: f64) -> Option<Item> {
        unsafe {
            from_glib_none(ffi::gimp_item_transform_rotate(self.as_ref().to_glib_none().0, angle, auto_center.into_glib(), center_x, center_y))
        }
    }

    #[doc(alias = "gimp_item_transform_rotate_simple")]
#[must_use]
    fn transform_rotate_simple(&self, rotate_type: RotationType, auto_center: bool, center_x: f64, center_y: f64) -> Option<Item> {
        unsafe {
            from_glib_none(ffi::gimp_item_transform_rotate_simple(self.as_ref().to_glib_none().0, rotate_type.into_glib(), auto_center.into_glib(), center_x, center_y))
        }
    }

    #[doc(alias = "gimp_item_transform_scale")]
#[must_use]
    fn transform_scale(&self, x0: f64, y0: f64, x1: f64, y1: f64) -> Option<Item> {
        unsafe {
            from_glib_none(ffi::gimp_item_transform_scale(self.as_ref().to_glib_none().0, x0, y0, x1, y1))
        }
    }

    #[doc(alias = "gimp_item_transform_shear")]
#[must_use]
    fn transform_shear(&self, shear_type: OrientationType, magnitude: f64) -> Option<Item> {
        unsafe {
            from_glib_none(ffi::gimp_item_transform_shear(self.as_ref().to_glib_none().0, shear_type.into_glib(), magnitude))
        }
    }

    #[doc(alias = "gimp_item_transform_translate")]
#[must_use]
    fn transform_translate(&self, off_x: f64, off_y: f64) -> Option<Item> {
        unsafe {
            from_glib_none(ffi::gimp_item_transform_translate(self.as_ref().to_glib_none().0, off_x, off_y))
        }
    }
}

impl<O: IsA<Item>> ItemExt for O {}
