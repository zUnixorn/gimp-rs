// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{ffi,AddMaskType,Drawable,Image,ImageType,Item,LayerColorSpace,LayerCompositeMode,LayerMask,LayerMode,MaskApplyMode};
use glib::{prelude::*,translate::*};

glib::wrapper! {
    #[doc(alias = "GimpLayer")]
    pub struct Layer(Object<ffi::GimpLayer, ffi::GimpLayerClass>) @extends Drawable, Item;

    match fn {
        type_ => || ffi::gimp_layer_get_type(),
    }
}

impl Layer {
        pub const NONE: Option<&'static Layer> = None;
    

    #[doc(alias = "gimp_layer_new")]
    pub fn new(image: &Image, name: Option<&str>, width: i32, height: i32, type_: ImageType, opacity: f64, mode: LayerMode) -> Layer {
        skip_assert_initialized!();
        unsafe {
            from_glib_none(ffi::gimp_layer_new(image.to_glib_none().0, name.to_glib_none().0, width, height, type_.into_glib(), opacity, mode.into_glib()))
        }
    }

    #[doc(alias = "gimp_layer_new_from_drawable")]
    #[doc(alias = "new_from_drawable")]
    pub fn from_drawable(drawable: &impl IsA<Drawable>, dest_image: &Image) -> Layer {
        skip_assert_initialized!();
        unsafe {
            from_glib_none(ffi::gimp_layer_new_from_drawable(drawable.as_ref().to_glib_none().0, dest_image.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_layer_new_from_pixbuf")]
    #[doc(alias = "new_from_pixbuf")]
    pub fn from_pixbuf(image: &Image, name: &str, pixbuf: &gdk_pixbuf::Pixbuf, opacity: f64, mode: LayerMode, progress_start: f64, progress_end: f64) -> Layer {
        skip_assert_initialized!();
        unsafe {
            from_glib_none(ffi::gimp_layer_new_from_pixbuf(image.to_glib_none().0, name.to_glib_none().0, pixbuf.to_glib_none().0, opacity, mode.into_glib(), progress_start, progress_end))
        }
    }

    #[doc(alias = "gimp_layer_new_from_visible")]
    #[doc(alias = "new_from_visible")]
    pub fn from_visible(image: &Image, dest_image: &Image, name: &str) -> Layer {
        skip_assert_initialized!();
        unsafe {
            from_glib_none(ffi::gimp_layer_new_from_visible(image.to_glib_none().0, dest_image.to_glib_none().0, name.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_layer_from_mask")]
    pub fn from_mask(mask: &LayerMask) -> Option<Layer> {
        skip_assert_initialized!();
        unsafe {
            from_glib_none(ffi::gimp_layer_from_mask(mask.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_layer_get_by_id")]
    #[doc(alias = "get_by_id")]
    pub fn by_id(layer_id: i32) -> Option<Layer> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::gimp_layer_get_by_id(layer_id))
        }
    }
}

pub trait LayerExt: IsA<Layer> + 'static {
    #[doc(alias = "gimp_layer_add_alpha")]
    fn add_alpha(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_layer_add_alpha(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_layer_add_mask")]
    fn add_mask(&self, mask: &LayerMask) -> bool {
        unsafe {
            from_glib(ffi::gimp_layer_add_mask(self.as_ref().to_glib_none().0, mask.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_layer_copy")]
#[must_use]
    fn copy(&self) -> Option<Layer> {
        unsafe {
            from_glib_none(ffi::gimp_layer_copy(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_layer_create_mask")]
    fn create_mask(&self, mask_type: AddMaskType) -> Option<LayerMask> {
        unsafe {
            from_glib_none(ffi::gimp_layer_create_mask(self.as_ref().to_glib_none().0, mask_type.into_glib()))
        }
    }

    #[doc(alias = "gimp_layer_flatten")]
    fn flatten(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_layer_flatten(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_layer_get_apply_mask")]
    #[doc(alias = "get_apply_mask")]
    fn is_apply_mask(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_layer_get_apply_mask(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_layer_get_blend_space")]
    #[doc(alias = "get_blend_space")]
    fn blend_space(&self) -> LayerColorSpace {
        unsafe {
            from_glib(ffi::gimp_layer_get_blend_space(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_layer_get_composite_mode")]
    #[doc(alias = "get_composite_mode")]
    fn composite_mode(&self) -> LayerCompositeMode {
        unsafe {
            from_glib(ffi::gimp_layer_get_composite_mode(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_layer_get_composite_space")]
    #[doc(alias = "get_composite_space")]
    fn composite_space(&self) -> LayerColorSpace {
        unsafe {
            from_glib(ffi::gimp_layer_get_composite_space(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_layer_get_edit_mask")]
    #[doc(alias = "get_edit_mask")]
    fn is_edit_mask(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_layer_get_edit_mask(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_layer_get_lock_alpha")]
    #[doc(alias = "get_lock_alpha")]
    fn is_lock_alpha(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_layer_get_lock_alpha(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_layer_get_mask")]
    #[doc(alias = "get_mask")]
    fn mask(&self) -> Option<LayerMask> {
        unsafe {
            from_glib_none(ffi::gimp_layer_get_mask(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_layer_get_mode")]
    #[doc(alias = "get_mode")]
    fn mode(&self) -> LayerMode {
        unsafe {
            from_glib(ffi::gimp_layer_get_mode(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_layer_get_opacity")]
    #[doc(alias = "get_opacity")]
    fn opacity(&self) -> f64 {
        unsafe {
            ffi::gimp_layer_get_opacity(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "gimp_layer_get_show_mask")]
    #[doc(alias = "get_show_mask")]
    fn shows_mask(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_layer_get_show_mask(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_layer_is_floating_sel")]
    fn is_floating_sel(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_layer_is_floating_sel(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_layer_remove_mask")]
    fn remove_mask(&self, mode: MaskApplyMode) -> bool {
        unsafe {
            from_glib(ffi::gimp_layer_remove_mask(self.as_ref().to_glib_none().0, mode.into_glib()))
        }
    }

    #[doc(alias = "gimp_layer_resize")]
    fn resize(&self, new_width: i32, new_height: i32, offx: i32, offy: i32) -> bool {
        unsafe {
            from_glib(ffi::gimp_layer_resize(self.as_ref().to_glib_none().0, new_width, new_height, offx, offy))
        }
    }

    #[doc(alias = "gimp_layer_resize_to_image_size")]
    fn resize_to_image_size(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_layer_resize_to_image_size(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_layer_scale")]
    fn scale(&self, new_width: i32, new_height: i32, local_origin: bool) -> bool {
        unsafe {
            from_glib(ffi::gimp_layer_scale(self.as_ref().to_glib_none().0, new_width, new_height, local_origin.into_glib()))
        }
    }

    #[doc(alias = "gimp_layer_set_apply_mask")]
    fn set_apply_mask(&self, apply_mask: bool) -> bool {
        unsafe {
            from_glib(ffi::gimp_layer_set_apply_mask(self.as_ref().to_glib_none().0, apply_mask.into_glib()))
        }
    }

    #[doc(alias = "gimp_layer_set_blend_space")]
    fn set_blend_space(&self, blend_space: LayerColorSpace) -> bool {
        unsafe {
            from_glib(ffi::gimp_layer_set_blend_space(self.as_ref().to_glib_none().0, blend_space.into_glib()))
        }
    }

    #[doc(alias = "gimp_layer_set_composite_mode")]
    fn set_composite_mode(&self, composite_mode: LayerCompositeMode) -> bool {
        unsafe {
            from_glib(ffi::gimp_layer_set_composite_mode(self.as_ref().to_glib_none().0, composite_mode.into_glib()))
        }
    }

    #[doc(alias = "gimp_layer_set_composite_space")]
    fn set_composite_space(&self, composite_space: LayerColorSpace) -> bool {
        unsafe {
            from_glib(ffi::gimp_layer_set_composite_space(self.as_ref().to_glib_none().0, composite_space.into_glib()))
        }
    }

    #[doc(alias = "gimp_layer_set_edit_mask")]
    fn set_edit_mask(&self, edit_mask: bool) -> bool {
        unsafe {
            from_glib(ffi::gimp_layer_set_edit_mask(self.as_ref().to_glib_none().0, edit_mask.into_glib()))
        }
    }

    #[doc(alias = "gimp_layer_set_lock_alpha")]
    fn set_lock_alpha(&self, lock_alpha: bool) -> bool {
        unsafe {
            from_glib(ffi::gimp_layer_set_lock_alpha(self.as_ref().to_glib_none().0, lock_alpha.into_glib()))
        }
    }

    #[doc(alias = "gimp_layer_set_mode")]
    fn set_mode(&self, mode: LayerMode) -> bool {
        unsafe {
            from_glib(ffi::gimp_layer_set_mode(self.as_ref().to_glib_none().0, mode.into_glib()))
        }
    }

    #[doc(alias = "gimp_layer_set_offsets")]
    fn set_offsets(&self, offx: i32, offy: i32) -> bool {
        unsafe {
            from_glib(ffi::gimp_layer_set_offsets(self.as_ref().to_glib_none().0, offx, offy))
        }
    }

    #[doc(alias = "gimp_layer_set_opacity")]
    fn set_opacity(&self, opacity: f64) -> bool {
        unsafe {
            from_glib(ffi::gimp_layer_set_opacity(self.as_ref().to_glib_none().0, opacity))
        }
    }

    #[doc(alias = "gimp_layer_set_show_mask")]
    fn set_show_mask(&self, show_mask: bool) -> bool {
        unsafe {
            from_glib(ffi::gimp_layer_set_show_mask(self.as_ref().to_glib_none().0, show_mask.into_glib()))
        }
    }
}

impl<O: IsA<Layer>> LayerExt for O {}
