// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{ffi,FileProcedure,Procedure};
use glib::{prelude::*,translate::*};

glib::wrapper! {
    /// A [class`Procedure`] subclass that makes it easier to write file load
    /// procedures.
    ///
    /// It automatically adds the standard
    ///
    /// ( [enum`RunMode`], [iface`Gio`] )
    ///
    /// arguments and the standard
    ///
    /// ( [class`Image`] )
    ///
    /// return value of a load procedure. It is possible to add additional
    /// arguments.
    ///
    /// When invoked via [method`Procedure`], it unpacks these standard
    /// arguments and calls `run_func` which is a [callback`RunImageFunc`]. The
    /// "args" [struct`ValueArray`] of [callback`RunImageFunc`] only contains
    /// additionally added arguments.
    ///
    /// # Implements
    ///
    /// [`LoadProcedureExt`][trait@crate::prelude::LoadProcedureExt], [`FileProcedureExt`][trait@crate::prelude::FileProcedureExt], [`ProcedureExt`][trait@crate::prelude::ProcedureExt], [`trait@glib::ObjectExt`], [`ProcedureExtManual`][trait@crate::prelude::ProcedureExtManual]
    #[doc(alias = "GimpLoadProcedure")]
    pub struct LoadProcedure(Object<ffi::GimpLoadProcedure, ffi::GimpLoadProcedureClass>) @extends FileProcedure, Procedure;

    match fn {
        type_ => || ffi::gimp_load_procedure_get_type(),
    }
}

impl LoadProcedure {
        pub const NONE: Option<&'static LoadProcedure> = None;
    

    //#[doc(alias = "gimp_load_procedure_new")]
    //pub fn new<P: Fn(&Procedure, &RunMode, &gio::File, &Metadata, &MetadataLoadFlags, &ProcedureConfig) -> ValueArray + 'static>(plug_in: &impl IsA<PlugIn>, name: &str, proc_type: PDBProcType, run_func: P) -> LoadProcedure {
    //    unsafe { TODO: call ffi:gimp_load_procedure_new() }
    //}
}

/// Trait containing all [`struct@LoadProcedure`] methods.
///
/// # Implementors
///
/// [`LoadProcedure`][struct@crate::LoadProcedure], [`VectorLoadProcedure`][struct@crate::VectorLoadProcedure]
pub trait LoadProcedureExt: IsA<LoadProcedure> + 'static {
    /// Returns the procedure's 'handles raw' flag as set with
    /// [method[`LoadProcedure`][crate::LoadProcedure]].
    ///
    /// # Returns
    ///
    /// The procedure's 'handles raw' flag.
    #[doc(alias = "gimp_load_procedure_get_handles_raw")]
    #[doc(alias = "get_handles_raw")]
    fn is_handles_raw(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_load_procedure_get_handles_raw(self.as_ref().to_glib_none().0))
        }
    }

    /// Returns the procedure's thumbnail loader procedure as set with
    /// [method[`LoadProcedure`][crate::LoadProcedure]].
    ///
    /// # Returns
    ///
    /// The procedure's thumbnail loader procedure
    #[doc(alias = "gimp_load_procedure_get_thumbnail_loader")]
    #[doc(alias = "get_thumbnail_loader")]
    fn thumbnail_loader(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gimp_load_procedure_get_thumbnail_loader(self.as_ref().to_glib_none().0))
        }
    }

    /// Registers a load procedure as capable of handling raw digital camera loads.
    ///
    /// Note that you cannot call this function on [class`VectorLoadProcedure`]
    /// subclass objects.
    /// ## `handles_raw`
    /// The procedure's handles raw flag.
    #[doc(alias = "gimp_load_procedure_set_handles_raw")]
    fn set_handles_raw(&self, handles_raw: bool) {
        unsafe {
            ffi::gimp_load_procedure_set_handles_raw(self.as_ref().to_glib_none().0, handles_raw.into_glib());
        }
    }

    /// Associates a thumbnail loader with a file load procedure.
    ///
    /// Some file formats allow for embedded thumbnails, other file formats
    /// contain a scalable image or provide the image data in different
    /// resolutions. A file plug-in for such a format may register a
    /// special procedure that allows GIMP to load a thumbnail preview of
    /// the image. This procedure is then associated with the standard
    /// load procedure using this function.
    /// ## `thumbnail_proc`
    /// The name of the thumbnail load procedure.
    #[doc(alias = "gimp_load_procedure_set_thumbnail_loader")]
    fn set_thumbnail_loader(&self, thumbnail_proc: &str) {
        unsafe {
            ffi::gimp_load_procedure_set_thumbnail_loader(self.as_ref().to_glib_none().0, thumbnail_proc.to_glib_none().0);
        }
    }
}

impl<O: IsA<LoadProcedure>> LoadProcedureExt for O {}
