// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{ffi};
use glib::{translate::*};

glib::wrapper! {
    /// Keeps a list of [`Module`][crate::Module]'s found in a given searchpath.
    ///
    /// # Implements
    ///
    /// [`trait@glib::ObjectExt`], [`trait@gio::prelude::ListModelExt`]
    #[doc(alias = "GimpModuleDB")]
    pub struct ModuleDB(Object<ffi::GimpModuleDB, ffi::GimpModuleDBClass>) @implements gio::ListModel;

    match fn {
        type_ => || ffi::gimp_module_db_get_type(),
    }
}

impl ModuleDB {
    /// Creates a new [`ModuleDB`][crate::ModuleDB] instance. The `verbose` parameter will be
    /// passed to the created [`Module`][crate::Module] instances using [`Module::new()`][crate::Module::new()].
    /// ## `verbose`
    /// Pass [`true`] to enable debugging output.
    ///
    /// # Returns
    ///
    /// The new [`ModuleDB`][crate::ModuleDB] instance.
    #[doc(alias = "gimp_module_db_new")]
    pub fn new(verbose: bool) -> ModuleDB {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::gimp_module_db_new(verbose.into_glib()))
        }
    }

    /// Return the `G_SEARCHPATH_SEPARATOR` delimited list of module filenames
    /// which are excluded from auto-loading.
    ///
    /// # Returns
    ///
    /// the `self`'s `load_inhibit` string.
    #[doc(alias = "gimp_module_db_get_load_inhibit")]
    #[doc(alias = "get_load_inhibit")]
    pub fn load_inhibit(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gimp_module_db_get_load_inhibit(self.to_glib_none().0))
        }
    }

    /// Returns the 'verbose' setting of `self`.
    ///
    /// # Returns
    ///
    /// the 'verbose' setting.
    #[doc(alias = "gimp_module_db_get_verbose")]
    #[doc(alias = "get_verbose")]
    pub fn is_verbose(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_module_db_get_verbose(self.to_glib_none().0))
        }
    }

    /// Scans the directories contained in `module_path` and creates a
    /// [`Module`][crate::Module] instance for every loadable module contained in the
    /// directories.
    /// ## `module_path`
    /// A `G_SEARCHPATH_SEPARATOR` delimited list of directories
    ///  to load modules from.
    #[doc(alias = "gimp_module_db_load")]
    pub fn load(&self, module_path: &str) {
        unsafe {
            ffi::gimp_module_db_load(self.to_glib_none().0, module_path.to_glib_none().0);
        }
    }

    /// Does the same as [`load()`][Self::load()], plus removes all [`Module`][crate::Module]
    /// instances whose modules have been deleted from disk.
    ///
    /// Note that the [`Module`][crate::Module]'s will just be removed from the internal
    /// list and not freed as this is not possible with `GTypeModule`
    /// instances which actually implement types.
    /// ## `module_path`
    /// A `G_SEARCHPATH_SEPARATOR` delimited list of directories
    ///  to load modules from.
    #[doc(alias = "gimp_module_db_refresh")]
    pub fn refresh(&self, module_path: &str) {
        unsafe {
            ffi::gimp_module_db_refresh(self.to_glib_none().0, module_path.to_glib_none().0);
        }
    }

    /// Sets the `load_inhibit` flag for all [`Module`][crate::Module]'s which are kept
    /// by `self` (using `gimp_module_set_load_inhibit()`).
    /// ## `load_inhibit`
    /// A `G_SEARCHPATH_SEPARATOR` delimited list of module
    ///  filenames to exclude from auto-loading.
    #[doc(alias = "gimp_module_db_set_load_inhibit")]
    pub fn set_load_inhibit(&self, load_inhibit: &str) {
        unsafe {
            ffi::gimp_module_db_set_load_inhibit(self.to_glib_none().0, load_inhibit.to_glib_none().0);
        }
    }

    /// Sets the 'verbose' setting of `self`.
    /// ## `verbose`
    /// the new 'verbose' setting
    #[doc(alias = "gimp_module_db_set_verbose")]
    pub fn set_verbose(&self, verbose: bool) {
        unsafe {
            ffi::gimp_module_db_set_verbose(self.to_glib_none().0, verbose.into_glib());
        }
    }
}
