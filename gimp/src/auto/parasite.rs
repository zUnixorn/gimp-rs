// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{ffi};
use glib::{translate::*};

glib::wrapper! {
    /// Arbitrary pieces of data which can be attached to various GIMP objects.
    #[derive(Debug, Hash)]
    pub struct Parasite(Boxed<ffi::GimpParasite>);

    match fn {
        copy => |ptr| ffi::gimp_parasite_copy(ptr),
        free => |ptr| ffi::gimp_parasite_free(ptr),
        type_ => || ffi::gimp_parasite_get_type(),
    }
}

impl Parasite {
    //#[doc(alias = "gimp_parasite_new")]
    //pub fn new(name: &str, flags: u32, data: /*Unimplemented*/Option<&CArray TypeId { ns_id: 0, id: 10 }>) -> Parasite {
    //    unsafe { TODO: call ffi:gimp_parasite_new() }
    //}

    #[doc(alias = "gimp_parasite_compare")]
     fn compare(&self, b: &Parasite) -> bool {
        unsafe {
            from_glib(ffi::gimp_parasite_compare(self.to_glib_none().0, b.to_glib_none().0))
        }
    }

    //#[doc(alias = "gimp_parasite_get_data")]
    //#[doc(alias = "get_data")]
    //pub fn data(&self) -> /*Unimplemented*/CArray TypeId { ns_id: 0, id: 10 } {
    //    unsafe { TODO: call ffi:gimp_parasite_get_data() }
    //}

    ///
    /// # Returns
    ///
    /// `self` flags.
    #[doc(alias = "gimp_parasite_get_flags")]
    #[doc(alias = "get_flags")]
    pub fn flags(&self) -> libc::c_ulong {
        unsafe {
            ffi::gimp_parasite_get_flags(self.to_glib_none().0)
        }
    }

    ///
    /// # Returns
    ///
    /// `self`'s name.
    #[doc(alias = "gimp_parasite_get_name")]
    #[doc(alias = "get_name")]
    pub fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gimp_parasite_get_name(self.to_glib_none().0))
        }
    }

    /// ## `flag`
    /// a parasite flag
    ///
    /// # Returns
    ///
    /// [`true`] if `self` has `flag` set, [`false`] otherwise.
    #[doc(alias = "gimp_parasite_has_flag")]
    pub fn has_flag(&self, flag: libc::c_ulong) -> bool {
        unsafe {
            from_glib(ffi::gimp_parasite_has_flag(self.to_glib_none().0, flag))
        }
    }

    ///
    /// # Returns
    ///
    /// [`true`] if `self` is persistent, [`false`] otherwise.
    #[doc(alias = "gimp_parasite_is_persistent")]
    pub fn is_persistent(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_parasite_is_persistent(self.to_glib_none().0))
        }
    }

    /// Compare parasite's names.
    /// ## `name`
    /// a parasite name.
    ///
    /// # Returns
    ///
    /// [`true`] if `self` is named `name`, [`false`] otherwise.
    #[doc(alias = "gimp_parasite_is_type")]
    pub fn is_type(&self, name: &str) -> bool {
        unsafe {
            from_glib(ffi::gimp_parasite_is_type(self.to_glib_none().0, name.to_glib_none().0))
        }
    }

    ///
    /// # Returns
    ///
    /// [`true`] if `self` is undoable, [`false`] otherwise.
    #[doc(alias = "gimp_parasite_is_undoable")]
    pub fn is_undoable(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_parasite_is_undoable(self.to_glib_none().0))
        }
    }
}

// TODO fix this
// impl PartialEq for Parasite {
//     #[inline]
//     fn eq(&self, other: &Self) -> bool {
//         self.compare(other) == 0
//     }
// }
//
// impl Eq for Parasite {}
//
// impl PartialOrd for Parasite {
//     #[inline]
//     fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {
//         Some(self.cmp(other))
//     }
// }
//
// impl Ord for Parasite {
//     #[inline]
//     fn cmp(&self, other: &Self) -> std::cmp::Ordering {
//         self.compare(other).cmp(&0)
//     }
// }
