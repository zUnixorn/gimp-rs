// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{ffi,Resource};
use glib::{translate::*};

glib::wrapper! {
    #[doc(alias = "GimpPattern")]
    pub struct Pattern(Object<ffi::GimpPattern, ffi::GimpPatternClass>) @extends Resource;

    match fn {
        type_ => || ffi::gimp_pattern_get_type(),
    }
}

impl Pattern {
    #[doc(alias = "gimp_pattern_get_buffer")]
    #[doc(alias = "get_buffer")]
    pub fn buffer(&self, max_width: i32, max_height: i32, format: &babl::Object) -> Option<gegl::Buffer> {
        unsafe {
            from_glib_full(ffi::gimp_pattern_get_buffer(self.to_glib_none().0, max_width, max_height, format.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_pattern_get_info")]
    #[doc(alias = "get_info")]
    pub fn info(&self) -> Option<(i32, i32, i32)> {
        unsafe {
            let mut width = std::mem::MaybeUninit::uninit();
            let mut height = std::mem::MaybeUninit::uninit();
            let mut bpp = std::mem::MaybeUninit::uninit();
            let ret = from_glib(ffi::gimp_pattern_get_info(self.to_glib_none().0, width.as_mut_ptr(), height.as_mut_ptr(), bpp.as_mut_ptr()));
            if ret { Some((width.assume_init(), height.assume_init(), bpp.assume_init())) } else { None }
        }
    }

    #[doc(alias = "gimp_pattern_get_by_name")]
    #[doc(alias = "get_by_name")]
    pub fn by_name(name: &str) -> Option<Pattern> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::gimp_pattern_get_by_name(name.to_glib_none().0))
        }
    }
}
