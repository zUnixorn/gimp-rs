// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{ffi,PDBStatusType,Procedure};
use glib::{prelude::*,translate::*};

glib::wrapper! {
    #[doc(alias = "GimpPDB")]
    pub struct PDB(Object<ffi::GimpPDB, ffi::GimpPDBClass>);

    match fn {
        type_ => || ffi::gimp_pdb_get_type(),
    }
}

impl PDB {
    #[doc(alias = "gimp_pdb_dump_to_file")]
    pub fn dump_to_file(&self, file: &impl IsA<gio::File>) -> bool {
        unsafe {
            from_glib(ffi::gimp_pdb_dump_to_file(self.to_glib_none().0, file.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_pdb_get_last_error")]
    #[doc(alias = "get_last_error")]
    pub fn last_error(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gimp_pdb_get_last_error(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_pdb_get_last_status")]
    #[doc(alias = "get_last_status")]
    pub fn last_status(&self) -> PDBStatusType {
        unsafe {
            from_glib(ffi::gimp_pdb_get_last_status(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_pdb_lookup_procedure")]
    pub fn lookup_procedure(&self, procedure_name: &str) -> Option<Procedure> {
        unsafe {
            from_glib_none(ffi::gimp_pdb_lookup_procedure(self.to_glib_none().0, procedure_name.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_pdb_procedure_exists")]
    pub fn procedure_exists(&self, procedure_name: &str) -> bool {
        unsafe {
            from_glib(ffi::gimp_pdb_procedure_exists(self.to_glib_none().0, procedure_name.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_pdb_query_procedures")]
    pub fn query_procedures(&self, name: &str, blurb: &str, help: &str, help_id: &str, authors: &str, copyright: &str, date: &str, proc_type: &str) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::gimp_pdb_query_procedures(self.to_glib_none().0, name.to_glib_none().0, blurb.to_glib_none().0, help.to_glib_none().0, help_id.to_glib_none().0, authors.to_glib_none().0, copyright.to_glib_none().0, date.to_glib_none().0, proc_type.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_pdb_temp_procedure_name")]
    pub fn temp_procedure_name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::gimp_pdb_temp_procedure_name(self.to_glib_none().0))
        }
    }
}
