// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{ffi,ArgumentSync,Brush,Choice,Font,Gradient,IconType,PDBProcType,PDBStatusType,Palette,Pattern,PlugIn,ProcedureConfig,Resource,Unit,ValueArray};
use glib::{prelude::*,translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "GimpProcedure")]
    pub struct Procedure(Object<ffi::GimpProcedure, ffi::GimpProcedureClass>);

    match fn {
        type_ => || ffi::gimp_procedure_get_type(),
    }
}

impl Procedure {
        pub const NONE: Option<&'static Procedure> = None;
    

    #[doc(alias = "gimp_procedure_new")]
    pub fn new<P: Fn(&Procedure, &ProcedureConfig) -> ValueArray + 'static>(plug_in: &impl IsA<PlugIn>, name: &str, proc_type: PDBProcType, run_func: P) -> Procedure {
        skip_assert_initialized!();
        let run_func_data: Box_<P> = Box_::new(run_func);
        unsafe extern "C" fn run_func_func<P: Fn(&Procedure, &ProcedureConfig) -> ValueArray + 'static>(procedure: *mut ffi::GimpProcedure, config: *mut ffi::GimpProcedureConfig, run_data: glib::ffi::gpointer) -> *mut ffi::GimpValueArray {
            let procedure = from_glib_borrow(procedure);
            let config = from_glib_borrow(config);
            let callback = &*(run_data as *mut P);
            (*callback)(&procedure, &config)
            .to_glib_full()
        }
        let run_func = Some(run_func_func::<P> as _);
        unsafe extern "C" fn run_data_destroy_func<P: Fn(&Procedure, &ProcedureConfig) -> ValueArray + 'static>(data: glib::ffi::gpointer) {
            let _callback = Box_::from_raw(data as *mut P);
        }
        let destroy_call5 = Some(run_data_destroy_func::<P> as _);
        let super_callback0: Box_<P> = run_func_data;
        unsafe {
            from_glib_full(ffi::gimp_procedure_new(plug_in.as_ref().to_glib_none().0, name.to_glib_none().0, proc_type.into_glib(), run_func, Box_::into_raw(super_callback0) as *mut _, destroy_call5))
        }
    }
}

pub trait ProcedureExt: IsA<Procedure> + 'static {
    #[doc(alias = "gimp_procedure_add_boolean_argument")]
    fn add_boolean_argument(&self, name: &str, nick: &str, blurb: &str, value: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_boolean_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, value.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_boolean_aux_argument")]
    fn add_boolean_aux_argument(&self, name: &str, nick: &str, blurb: &str, value: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_boolean_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, value.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_boolean_return_value")]
    fn add_boolean_return_value(&self, name: &str, nick: &str, blurb: &str, value: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_boolean_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, value.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_brush_argument")]
    fn add_brush_argument(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, default_value: Option<&Brush>, default_to_context: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_brush_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), default_value.to_glib_none().0, default_to_context.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_brush_aux_argument")]
    fn add_brush_aux_argument(&self, name: &str, nick: &str, blurb: &str, default_value: Option<&Brush>, default_to_context: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_brush_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, default_value.to_glib_none().0, default_to_context.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_brush_return_value")]
    fn add_brush_return_value(&self, name: &str, nick: &str, blurb: &str, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_brush_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_bytes_argument")]
    fn add_bytes_argument(&self, name: &str, nick: &str, blurb: &str, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_bytes_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_bytes_aux_argument")]
    fn add_bytes_aux_argument(&self, name: &str, nick: &str, blurb: &str, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_bytes_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_bytes_return_value")]
    fn add_bytes_return_value(&self, name: &str, nick: &str, blurb: &str, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_bytes_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_channel_argument")]
    fn add_channel_argument(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_channel_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_channel_aux_argument")]
    fn add_channel_aux_argument(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_channel_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_channel_return_value")]
    fn add_channel_return_value(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_channel_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_choice_argument")]
    fn add_choice_argument(&self, name: &str, nick: &str, blurb: &str, choice: Choice, value: &str, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_choice_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, choice.into_glib_ptr(), value.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_choice_aux_argument")]
    fn add_choice_aux_argument(&self, name: &str, nick: &str, blurb: &str, choice: &Choice, value: &str, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_choice_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, choice.to_glib_none().0, value.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_choice_return_value")]
    fn add_choice_return_value(&self, name: &str, nick: &str, blurb: &str, choice: &Choice, value: &str, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_choice_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, choice.to_glib_none().0, value.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_color_argument")]
    fn add_color_argument(&self, name: &str, nick: &str, blurb: &str, has_alpha: bool, value: &impl IsA<gegl::Color>, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_color_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, has_alpha.into_glib(), value.as_ref().to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_color_aux_argument")]
    fn add_color_aux_argument(&self, name: &str, nick: &str, blurb: &str, has_alpha: bool, value: &impl IsA<gegl::Color>, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_color_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, has_alpha.into_glib(), value.as_ref().to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_color_from_string_argument")]
    fn add_color_from_string_argument(&self, name: &str, nick: &str, blurb: &str, has_alpha: bool, value: &str, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_color_from_string_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, has_alpha.into_glib(), value.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_color_from_string_aux_argument")]
    fn add_color_from_string_aux_argument(&self, name: &str, nick: &str, blurb: &str, has_alpha: bool, value: &str, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_color_from_string_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, has_alpha.into_glib(), value.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_color_from_string_return_value")]
    fn add_color_from_string_return_value(&self, name: &str, nick: &str, blurb: &str, has_alpha: bool, value: &str, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_color_from_string_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, has_alpha.into_glib(), value.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_color_return_value")]
    fn add_color_return_value(&self, name: &str, nick: &str, blurb: &str, has_alpha: bool, value: &impl IsA<gegl::Color>, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_color_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, has_alpha.into_glib(), value.as_ref().to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_core_object_array_argument")]
    fn add_core_object_array_argument(&self, name: &str, nick: &str, blurb: &str, object_type: glib::types::Type, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_core_object_array_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, object_type.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_core_object_array_aux_argument")]
    fn add_core_object_array_aux_argument(&self, name: &str, nick: &str, blurb: &str, object_type: glib::types::Type, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_core_object_array_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, object_type.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_core_object_array_return_value")]
    fn add_core_object_array_return_value(&self, name: &str, nick: &str, blurb: &str, object_type: glib::types::Type, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_core_object_array_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, object_type.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_display_argument")]
    fn add_display_argument(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_display_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_display_aux_argument")]
    fn add_display_aux_argument(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_display_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_display_return_value")]
    fn add_display_return_value(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_display_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_double_argument")]
    fn add_double_argument(&self, name: &str, nick: &str, blurb: &str, min: f64, max: f64, value: f64, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_double_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, min, max, value, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_double_array_argument")]
    fn add_double_array_argument(&self, name: &str, nick: &str, blurb: &str, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_double_array_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_double_array_aux_argument")]
    fn add_double_array_aux_argument(&self, name: &str, nick: &str, blurb: &str, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_double_array_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_double_array_return_value")]
    fn add_double_array_return_value(&self, name: &str, nick: &str, blurb: &str, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_double_array_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_double_aux_argument")]
    fn add_double_aux_argument(&self, name: &str, nick: &str, blurb: &str, min: f64, max: f64, value: f64, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_double_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, min, max, value, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_double_return_value")]
    fn add_double_return_value(&self, name: &str, nick: &str, blurb: &str, min: f64, max: f64, value: f64, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_double_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, min, max, value, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_drawable_argument")]
    fn add_drawable_argument(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_drawable_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_drawable_aux_argument")]
    fn add_drawable_aux_argument(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_drawable_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_drawable_return_value")]
    fn add_drawable_return_value(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_drawable_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_enum_argument")]
    fn add_enum_argument(&self, name: &str, nick: &str, blurb: &str, enum_type: glib::types::Type, value: i32, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_enum_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, enum_type.into_glib(), value, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_enum_aux_argument")]
    fn add_enum_aux_argument(&self, name: &str, nick: &str, blurb: &str, enum_type: glib::types::Type, value: i32, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_enum_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, enum_type.into_glib(), value, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_enum_return_value")]
    fn add_enum_return_value(&self, name: &str, nick: &str, blurb: &str, enum_type: glib::types::Type, value: i32, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_enum_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, enum_type.into_glib(), value, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_file_argument")]
    fn add_file_argument(&self, name: &str, nick: &str, blurb: &str, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_file_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_file_aux_argument")]
    fn add_file_aux_argument(&self, name: &str, nick: &str, blurb: &str, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_file_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_file_return_value")]
    fn add_file_return_value(&self, name: &str, nick: &str, blurb: &str, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_file_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_font_argument")]
    fn add_font_argument(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, default_value: Option<&Font>, default_to_context: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_font_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), default_value.to_glib_none().0, default_to_context.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_font_aux_argument")]
    fn add_font_aux_argument(&self, name: &str, nick: &str, blurb: &str, default_value: Option<&Font>, default_to_context: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_font_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, default_value.to_glib_none().0, default_to_context.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_font_return_value")]
    fn add_font_return_value(&self, name: &str, nick: &str, blurb: &str, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_font_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_gradient_argument")]
    fn add_gradient_argument(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, default_value: Option<&Gradient>, default_to_context: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_gradient_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), default_value.to_glib_none().0, default_to_context.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_gradient_aux_argument")]
    fn add_gradient_aux_argument(&self, name: &str, nick: &str, blurb: &str, default_value: Option<&Gradient>, default_to_context: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_gradient_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, default_value.to_glib_none().0, default_to_context.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_gradient_return_value")]
    fn add_gradient_return_value(&self, name: &str, nick: &str, blurb: &str, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_gradient_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_group_layer_argument")]
    fn add_group_layer_argument(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_group_layer_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_group_layer_aux_argument")]
    fn add_group_layer_aux_argument(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_group_layer_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_group_layer_return_value")]
    fn add_group_layer_return_value(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_group_layer_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_image_argument")]
    fn add_image_argument(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_image_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_image_aux_argument")]
    fn add_image_aux_argument(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_image_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_image_return_value")]
    fn add_image_return_value(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_image_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_int32_array_argument")]
    fn add_int32_array_argument(&self, name: &str, nick: &str, blurb: &str, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_int32_array_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_int32_array_aux_argument")]
    fn add_int32_array_aux_argument(&self, name: &str, nick: &str, blurb: &str, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_int32_array_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_int32_array_return_value")]
    fn add_int32_array_return_value(&self, name: &str, nick: &str, blurb: &str, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_int32_array_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_int_argument")]
    fn add_int_argument(&self, name: &str, nick: &str, blurb: &str, min: i32, max: i32, value: i32, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_int_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, min, max, value, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_int_aux_argument")]
    fn add_int_aux_argument(&self, name: &str, nick: &str, blurb: &str, min: i32, max: i32, value: i32, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_int_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, min, max, value, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_int_return_value")]
    fn add_int_return_value(&self, name: &str, nick: &str, blurb: &str, min: i32, max: i32, value: i32, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_int_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, min, max, value, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_item_argument")]
    fn add_item_argument(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_item_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_item_aux_argument")]
    fn add_item_aux_argument(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_item_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_item_return_value")]
    fn add_item_return_value(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_item_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_layer_argument")]
    fn add_layer_argument(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_layer_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_layer_aux_argument")]
    fn add_layer_aux_argument(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_layer_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_layer_mask_argument")]
    fn add_layer_mask_argument(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_layer_mask_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_layer_mask_aux_argument")]
    fn add_layer_mask_aux_argument(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_layer_mask_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_layer_mask_return_value")]
    fn add_layer_mask_return_value(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_layer_mask_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_layer_return_value")]
    fn add_layer_return_value(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_layer_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_menu_path")]
    fn add_menu_path(&self, menu_path: &str) {
        unsafe {
            ffi::gimp_procedure_add_menu_path(self.as_ref().to_glib_none().0, menu_path.to_glib_none().0);
        }
    }

    #[doc(alias = "gimp_procedure_add_palette_argument")]
    fn add_palette_argument(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, default_value: Option<&Palette>, default_to_context: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_palette_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), default_value.to_glib_none().0, default_to_context.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_palette_aux_argument")]
    fn add_palette_aux_argument(&self, name: &str, nick: &str, blurb: &str, default_value: Option<&Palette>, default_to_context: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_palette_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, default_value.to_glib_none().0, default_to_context.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_palette_return_value")]
    fn add_palette_return_value(&self, name: &str, nick: &str, blurb: &str, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_palette_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_param_argument")]
    fn add_param_argument(&self, name: &str, nick: &str, blurb: &str, param_type: glib::types::Type, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_param_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, param_type.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_param_aux_argument")]
    fn add_param_aux_argument(&self, name: &str, nick: &str, blurb: &str, param_type: glib::types::Type, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_param_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, param_type.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_param_return_value")]
    fn add_param_return_value(&self, name: &str, nick: &str, blurb: &str, param_type: glib::types::Type, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_param_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, param_type.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_parasite_argument")]
    fn add_parasite_argument(&self, name: &str, nick: &str, blurb: &str, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_parasite_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_parasite_aux_argument")]
    fn add_parasite_aux_argument(&self, name: &str, nick: &str, blurb: &str, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_parasite_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_parasite_return_value")]
    fn add_parasite_return_value(&self, name: &str, nick: &str, blurb: &str, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_parasite_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_path_argument")]
    fn add_path_argument(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_path_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_path_aux_argument")]
    fn add_path_aux_argument(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_path_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_path_return_value")]
    fn add_path_return_value(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_path_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_pattern_argument")]
    fn add_pattern_argument(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, default_value: Option<&Pattern>, default_to_context: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_pattern_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), default_value.to_glib_none().0, default_to_context.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_pattern_aux_argument")]
    fn add_pattern_aux_argument(&self, name: &str, nick: &str, blurb: &str, default_value: Option<&Pattern>, default_to_context: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_pattern_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, default_value.to_glib_none().0, default_to_context.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_pattern_return_value")]
    fn add_pattern_return_value(&self, name: &str, nick: &str, blurb: &str, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_pattern_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_resource_argument")]
    fn add_resource_argument(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, default_value: Option<&impl IsA<Resource>>, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_resource_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), default_value.map(|p| p.as_ref()).to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_resource_aux_argument")]
    fn add_resource_aux_argument(&self, name: &str, nick: &str, blurb: &str, default_value: Option<&impl IsA<Resource>>, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_resource_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, default_value.map(|p| p.as_ref()).to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_resource_return_value")]
    fn add_resource_return_value(&self, name: &str, nick: &str, blurb: &str, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_resource_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_selection_argument")]
    fn add_selection_argument(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_selection_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_selection_aux_argument")]
    fn add_selection_aux_argument(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_selection_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_selection_return_value")]
    fn add_selection_return_value(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_selection_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_string_argument")]
    fn add_string_argument(&self, name: &str, nick: &str, blurb: &str, value: &str, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_string_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, value.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_string_array_argument")]
    fn add_string_array_argument(&self, name: &str, nick: &str, blurb: &str, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_string_array_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_string_array_aux_argument")]
    fn add_string_array_aux_argument(&self, name: &str, nick: &str, blurb: &str, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_string_array_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_string_array_return_value")]
    fn add_string_array_return_value(&self, name: &str, nick: &str, blurb: &str, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_string_array_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_string_aux_argument")]
    fn add_string_aux_argument(&self, name: &str, nick: &str, blurb: &str, value: &str, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_string_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, value.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_string_return_value")]
    fn add_string_return_value(&self, name: &str, nick: &str, blurb: &str, value: &str, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_string_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, value.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_text_layer_argument")]
    fn add_text_layer_argument(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_text_layer_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_text_layer_aux_argument")]
    fn add_text_layer_aux_argument(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_text_layer_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_text_layer_return_value")]
    fn add_text_layer_return_value(&self, name: &str, nick: &str, blurb: &str, none_ok: bool, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_text_layer_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, none_ok.into_glib(), flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_uint_argument")]
    fn add_uint_argument(&self, name: &str, nick: &str, blurb: &str, min: u32, max: u32, value: u32, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_uint_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, min, max, value, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_uint_aux_argument")]
    fn add_uint_aux_argument(&self, name: &str, nick: &str, blurb: &str, min: u32, max: u32, value: u32, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_uint_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, min, max, value, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_uint_return_value")]
    fn add_uint_return_value(&self, name: &str, nick: &str, blurb: &str, min: u32, max: u32, value: u32, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_uint_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, min, max, value, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_unit_argument")]
    fn add_unit_argument(&self, name: &str, nick: &str, blurb: &str, show_pixels: bool, show_percent: bool, value: &Unit, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_unit_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, show_pixels.into_glib(), show_percent.into_glib(), value.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_unit_aux_argument")]
    fn add_unit_aux_argument(&self, name: &str, nick: &str, blurb: &str, show_pixels: bool, show_percent: bool, value: &Unit, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_unit_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, show_pixels.into_glib(), show_percent.into_glib(), value.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_add_unit_return_value")]
    fn add_unit_return_value(&self, name: &str, nick: &str, blurb: &str, show_pixels: bool, show_percent: bool, value: &Unit, flags: glib::ParamFlags) {
        unsafe {
            ffi::gimp_procedure_add_unit_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0, nick.to_glib_none().0, blurb.to_glib_none().0, show_pixels.into_glib(), show_percent.into_glib(), value.to_glib_none().0, flags.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_create_config")]
    fn create_config(&self) -> Option<ProcedureConfig> {
        unsafe {
            from_glib_full(ffi::gimp_procedure_create_config(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_procedure_find_argument")]
    fn find_argument(&self, name: &str) -> Option<glib::ParamSpec> {
        unsafe {
            from_glib_none(ffi::gimp_procedure_find_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_procedure_find_aux_argument")]
    fn find_aux_argument(&self, name: &str) -> Option<glib::ParamSpec> {
        unsafe {
            from_glib_none(ffi::gimp_procedure_find_aux_argument(self.as_ref().to_glib_none().0, name.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_procedure_find_return_value")]
    fn find_return_value(&self, name: &str) -> Option<glib::ParamSpec> {
        unsafe {
            from_glib_none(ffi::gimp_procedure_find_return_value(self.as_ref().to_glib_none().0, name.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_procedure_get_argument_sync")]
    #[doc(alias = "get_argument_sync")]
    fn argument_sync(&self, arg_name: &str) -> ArgumentSync {
        unsafe {
            from_glib(ffi::gimp_procedure_get_argument_sync(self.as_ref().to_glib_none().0, arg_name.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_procedure_get_arguments")]
    #[doc(alias = "get_arguments")]
    fn arguments(&self) -> Vec<glib::ParamSpec> {
        unsafe {
            let mut n_arguments = std::mem::MaybeUninit::uninit();
            let ret = FromGlibContainer::from_glib_none_num(ffi::gimp_procedure_get_arguments(self.as_ref().to_glib_none().0, n_arguments.as_mut_ptr()), n_arguments.assume_init() as _);
            ret
        }
    }

    #[doc(alias = "gimp_procedure_get_authors")]
    #[doc(alias = "get_authors")]
    fn authors(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gimp_procedure_get_authors(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_procedure_get_aux_arguments")]
    #[doc(alias = "get_aux_arguments")]
    fn aux_arguments(&self) -> Vec<glib::ParamSpec> {
        unsafe {
            let mut n_arguments = std::mem::MaybeUninit::uninit();
            let ret = FromGlibContainer::from_glib_none_num(ffi::gimp_procedure_get_aux_arguments(self.as_ref().to_glib_none().0, n_arguments.as_mut_ptr()), n_arguments.assume_init() as _);
            ret
        }
    }

    #[doc(alias = "gimp_procedure_get_blurb")]
    #[doc(alias = "get_blurb")]
    fn blurb(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gimp_procedure_get_blurb(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_procedure_get_copyright")]
    #[doc(alias = "get_copyright")]
    fn copyright(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gimp_procedure_get_copyright(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_procedure_get_date")]
    #[doc(alias = "get_date")]
    fn date(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gimp_procedure_get_date(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_procedure_get_help")]
    #[doc(alias = "get_help")]
    fn help(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gimp_procedure_get_help(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_procedure_get_help_id")]
    #[doc(alias = "get_help_id")]
    fn help_id(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gimp_procedure_get_help_id(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_procedure_get_icon_file")]
    #[doc(alias = "get_icon_file")]
    fn icon_file(&self) -> Option<gio::File> {
        unsafe {
            from_glib_none(ffi::gimp_procedure_get_icon_file(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_procedure_get_icon_name")]
    #[doc(alias = "get_icon_name")]
    fn icon_name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gimp_procedure_get_icon_name(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_procedure_get_icon_pixbuf")]
    #[doc(alias = "get_icon_pixbuf")]
    fn icon_pixbuf(&self) -> Option<gdk_pixbuf::Pixbuf> {
        unsafe {
            from_glib_none(ffi::gimp_procedure_get_icon_pixbuf(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_procedure_get_icon_type")]
    #[doc(alias = "get_icon_type")]
    fn icon_type(&self) -> IconType {
        unsafe {
            from_glib(ffi::gimp_procedure_get_icon_type(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_procedure_get_image_types")]
    #[doc(alias = "get_image_types")]
    fn image_types(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gimp_procedure_get_image_types(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_procedure_get_menu_label")]
    #[doc(alias = "get_menu_label")]
    fn menu_label(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gimp_procedure_get_menu_label(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_procedure_get_menu_paths")]
    #[doc(alias = "get_menu_paths")]
    fn menu_paths(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::gimp_procedure_get_menu_paths(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_procedure_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gimp_procedure_get_name(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_procedure_get_plug_in")]
    #[doc(alias = "get_plug_in")]
    #[doc(alias = "plug-in")]
    fn plug_in(&self) -> Option<PlugIn> {
        unsafe {
            from_glib_none(ffi::gimp_procedure_get_plug_in(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_procedure_get_proc_type")]
    #[doc(alias = "get_proc_type")]
    fn proc_type(&self) -> PDBProcType {
        unsafe {
            from_glib(ffi::gimp_procedure_get_proc_type(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_procedure_get_return_values")]
    #[doc(alias = "get_return_values")]
    fn return_values(&self) -> Vec<glib::ParamSpec> {
        unsafe {
            let mut n_return_values = std::mem::MaybeUninit::uninit();
            let ret = FromGlibContainer::from_glib_none_num(ffi::gimp_procedure_get_return_values(self.as_ref().to_glib_none().0, n_return_values.as_mut_ptr()), n_return_values.assume_init() as _);
            ret
        }
    }

    #[doc(alias = "gimp_procedure_get_sensitivity_mask")]
    #[doc(alias = "get_sensitivity_mask")]
    fn sensitivity_mask(&self) -> i32 {
        unsafe {
            ffi::gimp_procedure_get_sensitivity_mask(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "gimp_procedure_new_return_values")]
    fn new_return_values(&self, status: PDBStatusType, error: Option<glib::Error>) -> Option<ValueArray> {
        unsafe {
            from_glib_full(ffi::gimp_procedure_new_return_values(self.as_ref().to_glib_none().0, status.into_glib(), error.into_glib_ptr()))
        }
    }

    #[doc(alias = "gimp_procedure_persistent_ready")]
    fn persistent_ready(&self) {
        unsafe {
            ffi::gimp_procedure_persistent_ready(self.as_ref().to_glib_none().0);
        }
    }

    //#[doc(alias = "gimp_procedure_run")]
    //fn run(&self, first_arg_name: &str, : /*Unknown conversion*//*Unimplemented*/Basic: VarArgs) -> Option<ValueArray> {
    //    unsafe { TODO: call ffi:gimp_procedure_run() }
    //}

    #[doc(alias = "gimp_procedure_run_config")]
    fn run_config(&self, config: Option<&impl IsA<ProcedureConfig>>) -> Option<ValueArray> {
        unsafe {
            from_glib_full(ffi::gimp_procedure_run_config(self.as_ref().to_glib_none().0, config.map(|p| p.as_ref()).to_glib_none().0))
        }
    }

    //#[doc(alias = "gimp_procedure_run_valist")]
    //fn run_valist(&self, first_arg_name: &str, args: /*Unknown conversion*//*Unimplemented*/Unsupported) -> Option<ValueArray> {
    //    unsafe { TODO: call ffi:gimp_procedure_run_valist() }
    //}

    #[doc(alias = "gimp_procedure_set_argument_sync")]
    fn set_argument_sync(&self, arg_name: &str, sync: ArgumentSync) {
        unsafe {
            ffi::gimp_procedure_set_argument_sync(self.as_ref().to_glib_none().0, arg_name.to_glib_none().0, sync.into_glib());
        }
    }

    #[doc(alias = "gimp_procedure_set_attribution")]
    fn set_attribution(&self, authors: &str, copyright: &str, date: &str) {
        unsafe {
            ffi::gimp_procedure_set_attribution(self.as_ref().to_glib_none().0, authors.to_glib_none().0, copyright.to_glib_none().0, date.to_glib_none().0);
        }
    }

    #[doc(alias = "gimp_procedure_set_documentation")]
    fn set_documentation(&self, blurb: &str, help: Option<&str>, help_id: Option<&str>) {
        unsafe {
            ffi::gimp_procedure_set_documentation(self.as_ref().to_glib_none().0, blurb.to_glib_none().0, help.to_glib_none().0, help_id.to_glib_none().0);
        }
    }

    #[doc(alias = "gimp_procedure_set_icon_file")]
    fn set_icon_file(&self, file: Option<&impl IsA<gio::File>>) {
        unsafe {
            ffi::gimp_procedure_set_icon_file(self.as_ref().to_glib_none().0, file.map(|p| p.as_ref()).to_glib_none().0);
        }
    }

    #[doc(alias = "gimp_procedure_set_icon_name")]
    fn set_icon_name(&self, icon_name: Option<&str>) {
        unsafe {
            ffi::gimp_procedure_set_icon_name(self.as_ref().to_glib_none().0, icon_name.to_glib_none().0);
        }
    }

    #[doc(alias = "gimp_procedure_set_icon_pixbuf")]
    fn set_icon_pixbuf(&self, pixbuf: Option<&gdk_pixbuf::Pixbuf>) {
        unsafe {
            ffi::gimp_procedure_set_icon_pixbuf(self.as_ref().to_glib_none().0, pixbuf.to_glib_none().0);
        }
    }

    #[doc(alias = "gimp_procedure_set_image_types")]
    fn set_image_types(&self, image_types: &str) {
        unsafe {
            ffi::gimp_procedure_set_image_types(self.as_ref().to_glib_none().0, image_types.to_glib_none().0);
        }
    }

    #[doc(alias = "gimp_procedure_set_menu_label")]
    fn set_menu_label(&self, menu_label: &str) {
        unsafe {
            ffi::gimp_procedure_set_menu_label(self.as_ref().to_glib_none().0, menu_label.to_glib_none().0);
        }
    }

    #[doc(alias = "procedure-type")]
    fn procedure_type(&self) -> PDBProcType {
        ObjectExt::property(self.as_ref(), "procedure-type")
    }
}

impl<O: IsA<Procedure>> ProcedureExt for O {}
