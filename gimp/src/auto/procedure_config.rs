// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{ffi,Image,Procedure};
use glib::{prelude::*,translate::*};

glib::wrapper! {
    #[doc(alias = "GimpProcedureConfig")]
    pub struct ProcedureConfig(Object<ffi::GimpProcedureConfig, ffi::GimpProcedureConfigClass>);

    match fn {
        type_ => || ffi::gimp_procedure_config_get_type(),
    }
}

impl ProcedureConfig {
        pub const NONE: Option<&'static ProcedureConfig> = None;
    
}

pub trait ProcedureConfigExt: IsA<ProcedureConfig> + 'static {
    #[doc(alias = "gimp_procedure_config_get_choice_id")]
    #[doc(alias = "get_choice_id")]
    fn choice_id(&self, property_name: &str) -> i32 {
        unsafe {
            ffi::gimp_procedure_config_get_choice_id(self.as_ref().to_glib_none().0, property_name.to_glib_none().0)
        }
    }

    #[doc(alias = "gimp_procedure_config_get_color_array")]
    #[doc(alias = "get_color_array")]
    fn color_array(&self, property_name: &str) -> Vec<gegl::Color> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::gimp_procedure_config_get_color_array(self.as_ref().to_glib_none().0, property_name.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_procedure_config_get_core_object_array")]
    #[doc(alias = "get_core_object_array")]
    fn core_object_array(&self, property_name: &str) -> Vec<glib::Object> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::gimp_procedure_config_get_core_object_array(self.as_ref().to_glib_none().0, property_name.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_procedure_config_get_procedure")]
    #[doc(alias = "get_procedure")]
    fn procedure(&self) -> Option<Procedure> {
        unsafe {
            from_glib_none(ffi::gimp_procedure_config_get_procedure(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_procedure_config_save_metadata")]
    fn save_metadata(&self, exported_image: &Image, file: &impl IsA<gio::File>) {
        unsafe {
            ffi::gimp_procedure_config_save_metadata(self.as_ref().to_glib_none().0, exported_image.to_glib_none().0, file.as_ref().to_glib_none().0);
        }
    }

    #[doc(alias = "gimp_procedure_config_set_color_array")]
    fn set_color_array(&self, property_name: &str, colors: &[gegl::Color]) {
        let n_colors = colors.len() as _;
        unsafe {
            ffi::gimp_procedure_config_set_color_array(self.as_ref().to_glib_none().0, property_name.to_glib_none().0, colors.to_glib_none().0, n_colors);
        }
    }

    #[doc(alias = "gimp_procedure_config_set_core_object_array")]
    fn set_core_object_array(&self, property_name: &str, objects: &[glib::Object]) {
        let n_objects = objects.len() as _;
        unsafe {
            ffi::gimp_procedure_config_set_core_object_array(self.as_ref().to_glib_none().0, property_name.to_glib_none().0, objects.to_glib_none().0, n_objects);
        }
    }
}

impl<O: IsA<ProcedureConfig>> ProcedureConfigExt for O {}
