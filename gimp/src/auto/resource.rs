// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{ffi};
use glib::{prelude::*,translate::*};

glib::wrapper! {
    #[doc(alias = "GimpResource")]
    pub struct Resource(Object<ffi::GimpResource, ffi::GimpResourceClass>);

    match fn {
        type_ => || ffi::gimp_resource_get_type(),
    }
}

impl Resource {
        pub const NONE: Option<&'static Resource> = None;
    

    #[doc(alias = "gimp_resource_get_by_id")]
    #[doc(alias = "get_by_id")]
    pub fn by_id(resource_id: i32) -> Option<Resource> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::gimp_resource_get_by_id(resource_id))
        }
    }

    #[doc(alias = "gimp_resource_get_by_name")]
    #[doc(alias = "get_by_name")]
    pub fn by_name(resource_type: glib::types::Type, resource_name: &str) -> Option<Resource> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::gimp_resource_get_by_name(resource_type.into_glib(), resource_name.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_resource_id_is_brush")]
    pub fn id_is_brush(resource_id: i32) -> bool {
        assert_initialized_main_thread!();
        unsafe {
            from_glib(ffi::gimp_resource_id_is_brush(resource_id))
        }
    }

    #[doc(alias = "gimp_resource_id_is_font")]
    pub fn id_is_font(resource_id: i32) -> bool {
        assert_initialized_main_thread!();
        unsafe {
            from_glib(ffi::gimp_resource_id_is_font(resource_id))
        }
    }

    #[doc(alias = "gimp_resource_id_is_gradient")]
    pub fn id_is_gradient(resource_id: i32) -> bool {
        assert_initialized_main_thread!();
        unsafe {
            from_glib(ffi::gimp_resource_id_is_gradient(resource_id))
        }
    }

    #[doc(alias = "gimp_resource_id_is_palette")]
    pub fn id_is_palette(resource_id: i32) -> bool {
        assert_initialized_main_thread!();
        unsafe {
            from_glib(ffi::gimp_resource_id_is_palette(resource_id))
        }
    }

    #[doc(alias = "gimp_resource_id_is_pattern")]
    pub fn id_is_pattern(resource_id: i32) -> bool {
        assert_initialized_main_thread!();
        unsafe {
            from_glib(ffi::gimp_resource_id_is_pattern(resource_id))
        }
    }

    #[doc(alias = "gimp_resource_id_is_valid")]
    pub fn id_is_valid(resource_id: i32) -> bool {
        assert_initialized_main_thread!();
        unsafe {
            from_glib(ffi::gimp_resource_id_is_valid(resource_id))
        }
    }
}

pub trait ResourceExt: IsA<Resource> + 'static {
    #[doc(alias = "gimp_resource_delete")]
    fn delete(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_resource_delete(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_resource_duplicate")]
#[must_use]
    fn duplicate(&self) -> Option<Resource> {
        unsafe {
            from_glib_none(ffi::gimp_resource_duplicate(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_resource_get_id")]
    #[doc(alias = "get_id")]
    fn id(&self) -> i32 {
        unsafe {
            ffi::gimp_resource_get_id(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "gimp_resource_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::gimp_resource_get_name(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_resource_is_brush")]
    fn is_brush(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_resource_is_brush(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_resource_is_editable")]
    fn is_editable(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_resource_is_editable(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_resource_is_font")]
    fn is_font(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_resource_is_font(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_resource_is_gradient")]
    fn is_gradient(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_resource_is_gradient(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_resource_is_palette")]
    fn is_palette(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_resource_is_palette(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_resource_is_pattern")]
    fn is_pattern(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_resource_is_pattern(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_resource_is_valid")]
    fn is_valid(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_resource_is_valid(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_resource_rename")]
    fn rename(&self, new_name: &str) -> bool {
        unsafe {
            from_glib(ffi::gimp_resource_rename(self.as_ref().to_glib_none().0, new_name.to_glib_none().0))
        }
    }
}

impl<O: IsA<Resource>> ResourceExt for O {}
