// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{ffi,PDBProcType,PlugIn,Procedure,ProcedureConfig,ValueArray};
use glib::{prelude::*,translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    ///
    ///
    /// # Implements
    ///
    /// [`ProcedureExt`][trait@crate::prelude::ProcedureExt], [`trait@glib::ObjectExt`], [`ProcedureExtManual`][trait@crate::prelude::ProcedureExtManual]
    #[doc(alias = "GimpThumbnailProcedure")]
    pub struct ThumbnailProcedure(Object<ffi::GimpThumbnailProcedure, ffi::GimpThumbnailProcedureClass>) @extends Procedure;

    match fn {
        type_ => || ffi::gimp_thumbnail_procedure_get_type(),
    }
}

impl ThumbnailProcedure {
    /// Creates a new thumbnail procedure named `name` which will call `run_func`
    /// when invoked.
    ///
    /// See [`Procedure::new()`][crate::Procedure::new()] for information about `proc_type`.
    ///
    /// [`ThumbnailProcedure`][crate::ThumbnailProcedure] is a [`Procedure`][crate::Procedure] subclass that makes it easier
    /// to write file thumbnail procedures.
    ///
    /// It automatically adds the standard
    ///
    /// ([`gio::File`][crate::gio::File], size)
    ///
    /// arguments and the standard
    ///
    /// ([`Image`][crate::Image], image-width, image-height, [`ImageType`][crate::ImageType], num-layers)
    ///
    /// return value of a thumbnail procedure. It is possible to add
    /// additional arguments.
    ///
    /// When invoked via `gimp_procedure_run()`, it unpacks these standard
    /// arguments and calls `run_func` which is a `GimpRunThumbnailFunc`. The
    /// "args" [`ValueArray`][crate::ValueArray] of `GimpRunThumbnailFunc` only contains
    /// additionally added arguments.
    ///
    /// `GimpRunThumbnailFunc` must [`ValueArray::truncate()`][crate::ValueArray::truncate()] the returned
    /// [`ValueArray`][crate::ValueArray] to the number of return values it actually uses.
    /// ## `plug_in`
    /// a [`PlugIn`][crate::PlugIn].
    /// ## `name`
    /// the new procedure's name.
    /// ## `proc_type`
    /// the new procedure's [`PDBProcType`][crate::PDBProcType].
    /// ## `run_func`
    /// the run function for the new procedure.
    /// ## `run_data`
    /// user data passed to `run_func`.
    /// ## `run_data_destroy`
    /// free function for `run_data`, or [`None`].
    ///
    /// # Returns
    ///
    /// a new [`Procedure`][crate::Procedure].
    #[doc(alias = "gimp_thumbnail_procedure_new")]
    pub fn new<P: Fn(&Procedure, &gio::File, i32, &ProcedureConfig) -> ValueArray + 'static>(plug_in: &impl IsA<PlugIn>, name: &str, proc_type: PDBProcType, run_func: P) -> ThumbnailProcedure {
        skip_assert_initialized!();
        let run_func_data: Box_<P> = Box_::new(run_func);
        unsafe extern "C" fn run_func_func<P: Fn(&Procedure, &gio::File, i32, &ProcedureConfig) -> ValueArray + 'static>(procedure: *mut ffi::GimpProcedure, file: *mut gio::ffi::GFile, size: std::ffi::c_int, config: *mut ffi::GimpProcedureConfig, run_data: glib::ffi::gpointer) -> *mut ffi::GimpValueArray {
            let procedure = from_glib_borrow(procedure);
            let file = from_glib_borrow(file);
            let config = from_glib_borrow(config);
            let callback = &*(run_data as *mut P);
            (*callback)(&procedure, &file, size, &config)
            .to_glib_full()
        }
        let run_func = Some(run_func_func::<P> as _);
        unsafe extern "C" fn run_data_destroy_func<P: Fn(&Procedure, &gio::File, i32, &ProcedureConfig) -> ValueArray + 'static>(data: glib::ffi::gpointer) {
            let _callback = Box_::from_raw(data as *mut P);
        }
        let destroy_call5 = Some(run_data_destroy_func::<P> as _);
        let super_callback0: Box_<P> = run_func_data;
        unsafe {
            Procedure::from_glib_full(ffi::gimp_thumbnail_procedure_new(plug_in.as_ref().to_glib_none().0, name.to_glib_none().0, proc_type.into_glib(), run_func, Box_::into_raw(super_callback0) as *mut _, destroy_call5)).unsafe_cast()
        }
    }
}
