// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{ffi};
use glib::{translate::*};

glib::wrapper! {
    #[doc(alias = "GimpUnit")]
    pub struct Unit(Object<ffi::GimpUnit, ffi::GimpUnitClass>);

    match fn {
        type_ => || ffi::gimp_unit_get_type(),
    }
}

impl Unit {
    #[doc(alias = "gimp_unit_new")]
    pub fn new(name: &str, factor: f64, digits: i32, symbol: &str, abbreviation: &str) -> Unit {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::gimp_unit_new(name.to_glib_none().0, factor, digits, symbol.to_glib_none().0, abbreviation.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_unit_get_abbreviation")]
    #[doc(alias = "get_abbreviation")]
    pub fn abbreviation(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gimp_unit_get_abbreviation(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_unit_get_deletion_flag")]
    #[doc(alias = "get_deletion_flag")]
    pub fn is_deletion_flag(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_unit_get_deletion_flag(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_unit_get_digits")]
    #[doc(alias = "get_digits")]
    pub fn digits(&self) -> i32 {
        unsafe {
            ffi::gimp_unit_get_digits(self.to_glib_none().0)
        }
    }

    #[doc(alias = "gimp_unit_get_factor")]
    #[doc(alias = "get_factor")]
    pub fn factor(&self) -> f64 {
        unsafe {
            ffi::gimp_unit_get_factor(self.to_glib_none().0)
        }
    }

    #[doc(alias = "gimp_unit_get_id")]
    #[doc(alias = "get_id")]
    pub fn id(&self) -> i32 {
        unsafe {
            ffi::gimp_unit_get_id(self.to_glib_none().0)
        }
    }

    #[doc(alias = "gimp_unit_get_name")]
    #[doc(alias = "get_name")]
    pub fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gimp_unit_get_name(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_unit_get_scaled_digits")]
    #[doc(alias = "get_scaled_digits")]
    pub fn scaled_digits(&self, resolution: f64) -> i32 {
        unsafe {
            ffi::gimp_unit_get_scaled_digits(self.to_glib_none().0, resolution)
        }
    }

    #[doc(alias = "gimp_unit_get_symbol")]
    #[doc(alias = "get_symbol")]
    pub fn symbol(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::gimp_unit_get_symbol(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_unit_is_built_in")]
    pub fn is_built_in(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_unit_is_built_in(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_unit_is_metric")]
    pub fn is_metric(&self) -> bool {
        unsafe {
            from_glib(ffi::gimp_unit_is_metric(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_unit_set_deletion_flag")]
    pub fn set_deletion_flag(&self, deletion_flag: bool) {
        unsafe {
            ffi::gimp_unit_set_deletion_flag(self.to_glib_none().0, deletion_flag.into_glib());
        }
    }

    #[doc(alias = "gimp_unit_format_string")]
    pub fn format_string(format: &str, unit: &Unit) -> Option<glib::GString> {
        skip_assert_initialized!();
        unsafe {
            from_glib_full(ffi::gimp_unit_format_string(format.to_glib_none().0, unit.to_glib_none().0))
        }
    }

    #[doc(alias = "gimp_unit_get_by_id")]
    #[doc(alias = "get_by_id")]
    pub fn by_id(unit_id: i32) -> Option<Unit> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::gimp_unit_get_by_id(unit_id))
        }
    }

    #[doc(alias = "gimp_unit_inch")]
    pub fn inch() -> Option<Unit> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::gimp_unit_inch())
        }
    }

    #[doc(alias = "gimp_unit_mm")]
    pub fn mm() -> Option<Unit> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::gimp_unit_mm())
        }
    }

    #[doc(alias = "gimp_unit_percent")]
    pub fn percent() -> Option<Unit> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::gimp_unit_percent())
        }
    }

    #[doc(alias = "gimp_unit_pica")]
    pub fn pica() -> Option<Unit> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::gimp_unit_pica())
        }
    }

    #[doc(alias = "gimp_unit_pixel")]
    pub fn pixel() -> Option<Unit> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::gimp_unit_pixel())
        }
    }

    #[doc(alias = "gimp_unit_point")]
    pub fn point() -> Option<Unit> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::gimp_unit_point())
        }
    }
}
